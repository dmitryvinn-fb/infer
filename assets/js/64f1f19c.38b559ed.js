"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[546],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(f,i(i({ref:n},c),{},{components:t})):a.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1172:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),i=["components"],l={id:"analyzing-apps-or-projects",title:"Analyzing apps or projects"},s=void 0,p={unversionedId:"analyzing-apps-or-projects",id:"version-1.1.0/analyzing-apps-or-projects",title:"Analyzing apps or projects",description:"To analyze files with Infer you can use the compilers javac and clang. You",source:"@site/versioned_docs/version-1.1.0/01-analyzing-apps-or-projects.md",sourceDirName:".",slug:"/analyzing-apps-or-projects",permalink:"/docs/analyzing-apps-or-projects",draft:!1,tags:[],version:"1.1.0",sidebarPosition:1,frontMatter:{id:"analyzing-apps-or-projects",title:"Analyzing apps or projects"},sidebar:"version-1.1.0/docs",previous:{title:"Infer workflow",permalink:"/docs/infer-workflow"},next:{title:"Recommended flow for CI",permalink:"/docs/steps-for-ci"}},c={},u=[{value:"ant",id:"ant",level:3},{value:"Buck",id:"buck",level:3},{value:"cmake",id:"cmake",level:3},{value:"Gradle",id:"gradle",level:3},{value:"Make",id:"make",level:3},{value:"Maven",id:"maven",level:3},{value:"Xcodebuild",id:"xcodebuild",level:3},{value:"xctool",id:"xctool",level:3},{value:"Using a compilation database",id:"using-a-compilation-database",level:3},{value:"Other build systems",id:"other-build-systems",level:3}],d={toc:u},m="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To analyze files with Infer you can use the compilers ",(0,r.kt)("inlineCode",{parentName:"p"},"javac")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"clang"),". You\ncan also use Infer with ",(0,r.kt)("inlineCode",{parentName:"p"},"gcc"),", however, internally Infer will use ",(0,r.kt)("inlineCode",{parentName:"p"},"clang")," to\ncompile your code. So, it may not work if your code does not compile with\n",(0,r.kt)("inlineCode",{parentName:"p"},"clang"),"."),(0,r.kt)("p",null,"Moreover, you can run Infer with a variety of build systems. Notice that you can\nrun infer faster by running the compilation command in parallel, e.g.\n",(0,r.kt)("inlineCode",{parentName:"p"},"infer run -- make -j8"),". Please also take into account that if you wish to\nanalyze a project, you should probably do ",(0,r.kt)("inlineCode",{parentName:"p"},"clean")," beforehand so that the\ncompiler compiles all the files and so Infer also analyses all the files (see\nthe ",(0,r.kt)("a",{parentName:"p",href:"infer-workflow"},"previous section"),")."),(0,r.kt)("p",null,"Here is an overview of the build systems supported by Infer. You can get more\ninformation about how a particular build system is supported by looking at the\nSYNOPSIS section of the infer-capture manual: ",(0,r.kt)("inlineCode",{parentName:"p"},"infer capture --help"),"."),(0,r.kt)("h3",{id:"ant"},"ant"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run -- ant\n")),(0,r.kt)("h3",{id:"buck"},"Buck"),(0,r.kt)("p",null,"Running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run -- buck <buck target>\n")),(0,r.kt)("p",null,"will compute the list of Infer warnings in the targets passed as argument."),(0,r.kt)("p",null,"Running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run -- buck --deep <buck target>\n")),(0,r.kt)("p",null,"will compute the list of Infer warnings in the targets passed as argument and\nall the transitive dependencies."),(0,r.kt)("p",null,"The distinction between ",(0,r.kt)("inlineCode",{parentName:"p"},"--deep")," and the normal Buck complation mode is only\nsupported for Java projects. For the other kinds of projects, the ",(0,r.kt)("inlineCode",{parentName:"p"},"--deep"),"\noption has no effect."),(0,r.kt)("h3",{id:"cmake"},"cmake"),(0,r.kt)("p",null,"The most robust way is to have ",(0,r.kt)("inlineCode",{parentName:"p"},"cmake")," generate a compilation database that can\nbe then processed by Infer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd build\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..\ncd ..\ninfer run --compilation-database build/compile_commands.json\n")),(0,r.kt)("p",null,"Alternatively, one can trick ",(0,r.kt)("inlineCode",{parentName:"p"},"cmake")," into using infer instead of the system's\ncompilers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd build\ninfer compile -- cmake ..\ninfer run -- make -j 4\n")),(0,r.kt)("h3",{id:"gradle"},"Gradle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'infer run -- gradle <gradle task, e.g. "build">\ninfer run -- ./gradlew <gradle task, e.g. "build">\n')),(0,r.kt)("h3",{id:"make"},"Make"),(0,r.kt)("p",null,"Infer can analyze projects that compile with ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," by switching the compilers\n(for C/C++/Objective-C or Java) called by ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," with infer wrappers. This\ndoesn't always work, for instance if the Makefiles hardcode the absolute paths\nto the compilers (eg, if ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," calls ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/bin/gcc")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"gcc"),"). This is\nbecause this integration works by modifying ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," under the hood."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run -- make <make target>\n")),(0,r.kt)("h3",{id:"maven"},"Maven"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run -- mvn <maven target>\n")),(0,r.kt)("h3",{id:"xcodebuild"},"Xcodebuild"),(0,r.kt)("p",null,"The most robust way is to generate a compilation database, then pass that\ndatabase to Infer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"xcodebuild <your build options> | tee xcodebuild.log\nxcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\ninfer run --skip-analysis-in-path Pods --clang-compilation-db-files-escaped compile_commands.json\n")),(0,r.kt)("p",null,"See also\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/infer/issues/9#issuecomment-280121791"},"this comment on GitHub"),"."),(0,r.kt)("p",null,"Infer also provides a direct integration to xcodebuild that swaps the compiler\nused by xcodebuild under the hood. For instance, for an iOS app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run -- xcodebuild -target <target name> -configuration <build configuration> -sdk iphonesimulator\n")),(0,r.kt)("p",null,"There is an alternative xcodebuild integration that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"xcpretty")," under the\nhood; use it by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"--xcpretty")," to infer."),(0,r.kt)("h3",{id:"xctool"},"xctool"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"xctool")," to generate a compilation database then pass it to infer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"xctool.sh <your build options> -reporter json-compilation-database:compile_commands.json\ninfer run --skip-analysis-in-path Pods --clang-compilation-db-files-escaped compile_commands.json\n")),(0,r.kt)("p",null,"See also\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/infer/issues/9#issuecomment-280121791"},"this comment on GitHub"),"."),(0,r.kt)("h3",{id:"using-a-compilation-database"},"Using a compilation database"),(0,r.kt)("p",null,"Many build systems like cmake, Xcode or Buck generate compilation databases.\ninfer is able to use this database directly, simplifying its usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer --compilation-database compile_commands.json\n")),(0,r.kt)("h3",{id:"other-build-systems"},"Other build systems"),(0,r.kt)("p",null,"If infer doesn't recognize your build system, you will get an error like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ infer run -- foo\nUsage Error: Unsupported build command foo\n")),(0,r.kt)("p",null,"If your build system behaves like one of the above, you can tell infer to use\nthe same integration with ",(0,r.kt)("inlineCode",{parentName:"p"},"--force-integration"),". For instance this will proceed\nas if ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," was working the same way as ",(0,r.kt)("inlineCode",{parentName:"p"},"make"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"infer run --force-integration make -- foo\n")),(0,r.kt)("p",null,"If your build system is more exotic, and it doesn't support outputting\ncompilation databases, please let us know by\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/infer/issues/new"},"opening an issue"),"."))}f.isMDXComponent=!0}}]);