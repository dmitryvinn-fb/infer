"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2546],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return y}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(n),f=i,y=p["".concat(s,".").concat(f)]||p[f]||m[f]||o;return n?r.createElement(y,a(a({ref:t},l),{},{components:n})):r.createElement(y,a({ref:t},l))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:i,a[1]=u;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8759:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return p}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],u={title:"Impurity",description:'Detects functions with potential side-effects. Same as "purity", but implemented on top of Pulse.'},s=void 0,c={unversionedId:"checker-impurity",id:"checker-impurity",title:"Impurity",description:'Detects functions with potential side-effects. Same as "purity", but implemented on top of Pulse.',source:"@site/docs/checker-impurity.md",sourceDirName:".",slug:"/checker-impurity",permalink:"/docs/next/checker-impurity",draft:!1,tags:[],version:"current",frontMatter:{title:"Impurity",description:'Detects functions with potential side-effects. Same as "purity", but implemented on top of Pulse.'},sidebar:"docs",previous:{title:"Immutable Cast",permalink:"/docs/next/checker-immutable-cast"},next:{title:"Inefficient keySet Iterator",permalink:"/docs/next/checker-inefficient-keyset-iterator"}},l={},p=[{value:"List of Issue Types",id:"list-of-issue-types",level:2}],m={toc:p},f="wrapper";function y(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)(f,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Detects functions with potential side-effects. Same as "purity", but implemented on top of Pulse.'),(0,o.kt)("p",null,"Activate with ",(0,o.kt)("inlineCode",{parentName:"p"},"--impurity"),"."),(0,o.kt)("p",null,"Supported languages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"C/C++/ObjC: Experimental"),(0,o.kt)("li",{parentName:"ul"},"C#/.Net: No"),(0,o.kt)("li",{parentName:"ul"},"Erlang: No"),(0,o.kt)("li",{parentName:"ul"},"Hack: No"),(0,o.kt)("li",{parentName:"ul"},"Java: Experimental"),(0,o.kt)("li",{parentName:"ul"},"Python: No")),(0,o.kt)("p",null,"This is an experimental inter-procedural analysis that detects impure functions. It is meant to be an improvement over the ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/checker-purity"},"purity")," analysis with a negation on the issue types. For each function, impurity analysis keeps track of not only the impurity of the function but also some additional information such as which parameters/globals the function modifies. It models functions with no summary/model as impure. The analysis relies on ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"Pulse")," summaries to determine impurity."),(0,o.kt)("h2",{id:"list-of-issue-types"},"List of Issue Types"),(0,o.kt)("p",null,"The following issue types are reported by this checker:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/next/all-issue-types#impure_function"},"IMPURE_FUNCTION")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/next/all-issue-types#modifies_immutable"},"MODIFIES_IMMUTABLE"))))}y.isMDXComponent=!0}}]);