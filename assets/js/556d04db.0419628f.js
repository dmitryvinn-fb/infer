"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[218],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,d=u["".concat(i,".").concat(h)]||u[h]||f[h]||a;return n?r.createElement(d,c(c({ref:t},p),{},{components:n})):r.createElement(d,c({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7111:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],s={title:"Scope Leakage",description:'The Java/Kotlin checker takes into account a set of "scope" annotations and a must-not-hold relation over the scopes. The checker raises an alarm if there exists a field access path from object A to object B, with respective scopes SA and SB, such that must-not-hold(SA, SB).'},i=void 0,l={unversionedId:"checker-scope-leakage",id:"checker-scope-leakage",title:"Scope Leakage",description:'The Java/Kotlin checker takes into account a set of "scope" annotations and a must-not-hold relation over the scopes. The checker raises an alarm if there exists a field access path from object A to object B, with respective scopes SA and SB, such that must-not-hold(SA, SB).',source:"@site/docs/checker-scope-leakage.md",sourceDirName:".",slug:"/checker-scope-leakage",permalink:"/docs/next/checker-scope-leakage",draft:!1,tags:[],version:"current",frontMatter:{title:"Scope Leakage",description:'The Java/Kotlin checker takes into account a set of "scope" annotations and a must-not-hold relation over the scopes. The checker raises an alarm if there exists a field access path from object A to object B, with respective scopes SA and SB, such that must-not-hold(SA, SB).'},sidebar:"docs",previous:{title:"Resource Leak Lab Exercise",permalink:"/docs/next/checker-resource-leak-lab"},next:{title:"Static Initialization Order Fiasco",permalink:"/docs/next/checker-siof"}},p={},u=[{value:"List of Issue Types",id:"list-of-issue-types",level:2}],f={toc:u},h="wrapper";function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'The Java/Kotlin checker takes into account a set of "scope" annotations and a must-not-hold relation over the scopes. The checker raises an alarm if there exists a field access path from object A to object B, with respective scopes SA and SB, such that must-not-hold(SA, SB).'),(0,a.kt)("p",null,"Activate with ",(0,a.kt)("inlineCode",{parentName:"p"},"--scope-leakage"),"."),(0,a.kt)("p",null,"Supported languages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"C/C++/ObjC: No"),(0,a.kt)("li",{parentName:"ul"},"C#/.Net: No"),(0,a.kt)("li",{parentName:"ul"},"Erlang: No"),(0,a.kt)("li",{parentName:"ul"},"Hack: No"),(0,a.kt)("li",{parentName:"ul"},"Java: Yes"),(0,a.kt)("li",{parentName:"ul"},"Python: No")),(0,a.kt)("h2",{id:"list-of-issue-types"},"List of Issue Types"),(0,a.kt)("p",null,"The following issue types are reported by this checker:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/next/all-issue-types#scope_leakage"},"SCOPE_LEAKAGE"))))}d.isMDXComponent=!0}}]);