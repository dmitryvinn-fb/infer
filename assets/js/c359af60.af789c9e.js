"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[266],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,k=d["".concat(s,".").concat(h)]||d[h]||u[h]||l;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6478:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={title:"List of all issue types"},s=void 0,p={unversionedId:"all-issue-types",id:"all-issue-types",title:"List of all issue types",description:"Here is an overview of the issue types currently reported by Infer.",source:"@site/docs/all-issue-types.md",sourceDirName:".",slug:"/all-issue-types",permalink:"/docs/next/all-issue-types",draft:!1,tags:[],version:"current",frontMatter:{title:"List of all issue types"},sidebar:"docs",previous:{title:"List of all checkers",permalink:"/docs/next/all-checkers"},next:{title:"Annotation Reachability",permalink:"/docs/next/checker-annotation-reachability"}},c={},d=[{value:"ARBITRARY_CODE_EXECUTION_UNDER_LOCK",id:"arbitrary_code_execution_under_lock",level:2},{value:"AUTORELEASEPOOL_SIZE_COMPLEXITY_INCREASE",id:"autoreleasepool_size_complexity_increase",level:2},{value:"AUTORELEASEPOOL_SIZE_COMPLEXITY_INCREASE_UI_THREAD",id:"autoreleasepool_size_complexity_increase_ui_thread",level:2},{value:"AUTORELEASEPOOL_SIZE_UNREACHABLE_AT_EXIT",id:"autoreleasepool_size_unreachable_at_exit",level:2},{value:"BAD_ARG",id:"bad_arg",level:2},{value:"BAD_ARG_LATENT",id:"bad_arg_latent",level:2},{value:"BAD_KEY",id:"bad_key",level:2},{value:"BAD_KEY_LATENT",id:"bad_key_latent",level:2},{value:"BAD_MAP",id:"bad_map",level:2},{value:"BAD_MAP_LATENT",id:"bad_map_latent",level:2},{value:"BAD_RECORD",id:"bad_record",level:2},{value:"BAD_RECORD_LATENT",id:"bad_record_latent",level:2},{value:"BAD_RETURN",id:"bad_return",level:2},{value:"BAD_RETURN_LATENT",id:"bad_return_latent",level:2},{value:"BIABDUCTION_MEMORY_LEAK",id:"biabduction_memory_leak",level:2},{value:"BIABDUCTION_RETAIN_CYCLE",id:"biabduction_retain_cycle",level:2},{value:"BLOCK_PARAMETER_NOT_NULL_CHECKED",id:"block_parameter_not_null_checked",level:2},{value:"BUFFER_OVERRUN_L1",id:"buffer_overrun_l1",level:2},{value:"BUFFER_OVERRUN_L2",id:"buffer_overrun_l2",level:2},{value:"BUFFER_OVERRUN_L3",id:"buffer_overrun_l3",level:2},{value:"BUFFER_OVERRUN_L4",id:"buffer_overrun_l4",level:2},{value:"BUFFER_OVERRUN_L5",id:"buffer_overrun_l5",level:2},{value:"BUFFER_OVERRUN_S2",id:"buffer_overrun_s2",level:2},{value:"BUFFER_OVERRUN_U5",id:"buffer_overrun_u5",level:2},{value:"CAPTURED_STRONG_SELF",id:"captured_strong_self",level:2},{value:"CHECKERS_ALLOCATES_MEMORY",id:"checkers_allocates_memory",level:2},{value:"CHECKERS_ANNOTATION_REACHABILITY_ERROR",id:"checkers_annotation_reachability_error",level:2},{value:"CHECKERS_CALLS_EXPENSIVE_METHOD",id:"checkers_calls_expensive_method",level:2},{value:"CHECKERS_EXPENSIVE_OVERRIDES_UNANNOTATED",id:"checkers_expensive_overrides_unannotated",level:2},{value:"CHECKERS_FRAGMENT_RETAINS_VIEW",id:"checkers_fragment_retains_view",level:2},{value:"CHECKERS_IMMUTABLE_CAST",id:"checkers_immutable_cast",level:2},{value:"CHECKERS_PRINTF_ARGS",id:"checkers_printf_args",level:2},{value:"CONFIG_IMPACT",id:"config_impact",level:2},{value:"CONFIG_IMPACT_STRICT",id:"config_impact_strict",level:2},{value:"CONFIG_IMPACT_STRICT_BETA",id:"config_impact_strict_beta",level:2},{value:"CONFIG_USAGE",id:"config_usage",level:2},{value:"CONSTANT_ADDRESS_DEREFERENCE",id:"constant_address_dereference",level:2},{value:"CONSTANT_ADDRESS_DEREFERENCE_LATENT",id:"constant_address_dereference_latent",level:2},{value:"CREATE_INTENT_FROM_URI",id:"create_intent_from_uri",level:2},{value:"CROSS_SITE_SCRIPTING",id:"cross_site_scripting",level:2},{value:"DANGLING_POINTER_DEREFERENCE",id:"dangling_pointer_dereference",level:2},{value:"DATALOG_FACT",id:"datalog_fact",level:2},{value:"DATA_FLOW_TO_SINK",id:"data_flow_to_sink",level:2},{value:"DEADLOCK",id:"deadlock",level:2},{value:"DEAD_STORE",id:"dead_store",level:2},{value:"DIVIDE_BY_ZERO",id:"divide_by_zero",level:2},{value:"EMPTY_VECTOR_ACCESS",id:"empty_vector_access",level:2},{value:"ERADICATE_ANNOTATION_GRAPH",id:"eradicate_annotation_graph",level:2},{value:"ERADICATE_BAD_NESTED_CLASS_ANNOTATION",id:"eradicate_bad_nested_class_annotation",level:2},{value:"ERADICATE_CONDITION_REDUNDANT",id:"eradicate_condition_redundant",level:2},{value:"ERADICATE_FIELD_NOT_INITIALIZED",id:"eradicate_field_not_initialized",level:2},{value:"ERADICATE_FIELD_NOT_NULLABLE",id:"eradicate_field_not_nullable",level:2},{value:"ERADICATE_FIELD_OVER_ANNOTATED",id:"eradicate_field_over_annotated",level:2},{value:"ERADICATE_INCONSISTENT_SUBCLASS_PARAMETER_ANNOTATION",id:"eradicate_inconsistent_subclass_parameter_annotation",level:2},{value:"ERADICATE_INCONSISTENT_SUBCLASS_RETURN_ANNOTATION",id:"eradicate_inconsistent_subclass_return_annotation",level:2},{value:"ERADICATE_META_CLASS_CAN_BE_NULLSAFE",id:"eradicate_meta_class_can_be_nullsafe",level:2},{value:"ERADICATE_META_CLASS_IS_NULLSAFE",id:"eradicate_meta_class_is_nullsafe",level:2},{value:"ERADICATE_META_CLASS_NEEDS_IMPROVEMENT",id:"eradicate_meta_class_needs_improvement",level:2},{value:"ERADICATE_NULLABLE_DEREFERENCE",id:"eradicate_nullable_dereference",level:2},{value:"ERADICATE_PARAMETER_NOT_NULLABLE",id:"eradicate_parameter_not_nullable",level:2},{value:"ERADICATE_REDUNDANT_NESTED_CLASS_ANNOTATION",id:"eradicate_redundant_nested_class_annotation",level:2},{value:"ERADICATE_RETURN_NOT_NULLABLE",id:"eradicate_return_not_nullable",level:2},{value:"ERADICATE_RETURN_OVER_ANNOTATED",id:"eradicate_return_over_annotated",level:2},{value:"ERADICATE_UNCHECKED_USAGE_IN_NULLSAFE",id:"eradicate_unchecked_usage_in_nullsafe",level:2},{value:"ERADICATE_UNVETTED_THIRD_PARTY_IN_NULLSAFE",id:"eradicate_unvetted_third_party_in_nullsafe",level:2},{value:"EXECUTION_TIME_COMPLEXITY_INCREASE",id:"execution_time_complexity_increase",level:2},{value:"EXECUTION_TIME_COMPLEXITY_INCREASE_UI_THREAD",id:"execution_time_complexity_increase_ui_thread",level:2},{value:"EXECUTION_TIME_UNREACHABLE_AT_EXIT",id:"execution_time_unreachable_at_exit",level:2},{value:"EXPENSIVE_AUTORELEASEPOOL_SIZE",id:"expensive_autoreleasepool_size",level:2},{value:"EXPENSIVE_EXECUTION_TIME",id:"expensive_execution_time",level:2},{value:"EXPENSIVE_LOOP_INVARIANT_CALL",id:"expensive_loop_invariant_call",level:2},{value:"EXPOSED_INSECURE_INTENT_HANDLING",id:"exposed_insecure_intent_handling",level:2},{value:"GUARDEDBY_VIOLATION",id:"guardedby_violation",level:2},{value:"IMPURE_FUNCTION",id:"impure_function",level:2},{value:"INEFFICIENT_KEYSET_ITERATOR",id:"inefficient_keyset_iterator",level:2},{value:"INFERBO_ALLOC_IS_BIG",id:"inferbo_alloc_is_big",level:2},{value:"INFERBO_ALLOC_IS_NEGATIVE",id:"inferbo_alloc_is_negative",level:2},{value:"INFERBO_ALLOC_IS_ZERO",id:"inferbo_alloc_is_zero",level:2},{value:"INFERBO_ALLOC_MAY_BE_BIG",id:"inferbo_alloc_may_be_big",level:2},{value:"INFERBO_ALLOC_MAY_BE_NEGATIVE",id:"inferbo_alloc_may_be_negative",level:2},{value:"INFINITE_AUTORELEASEPOOL_SIZE",id:"infinite_autoreleasepool_size",level:2},{value:"INFINITE_EXECUTION_TIME",id:"infinite_execution_time",level:2},{value:"Example 1: T due to expressivity",id:"example-1-t-due-to-expressivity",level:3},{value:"Example 2: T due to unmodeled calls",id:"example-2-t-due-to-unmodeled-calls",level:3},{value:"Example 3: T due to calling another T-costed function",id:"example-3-t-due-to-calling-another-t-costed-function",level:3},{value:"INSECURE_INTENT_HANDLING",id:"insecure_intent_handling",level:2},{value:"INTEGER_OVERFLOW_L1",id:"integer_overflow_l1",level:2},{value:"INTEGER_OVERFLOW_L2",id:"integer_overflow_l2",level:2},{value:"INTEGER_OVERFLOW_L5",id:"integer_overflow_l5",level:2},{value:"INTEGER_OVERFLOW_U5",id:"integer_overflow_u5",level:2},{value:"INTERFACE_NOT_THREAD_SAFE",id:"interface_not_thread_safe",level:2},{value:"INVALID_SIL",id:"invalid_sil",level:2},{value:"INVARIANT_CALL",id:"invariant_call",level:2},{value:"IPC_ON_UI_THREAD",id:"ipc_on_ui_thread",level:2},{value:"JAVASCRIPT_INJECTION",id:"javascript_injection",level:2},{value:"LAB_RESOURCE_LEAK",id:"lab_resource_leak",level:2},{value:"LOCKLESS_VIOLATION",id:"lockless_violation",level:2},{value:"LOCK_CONSISTENCY_VIOLATION",id:"lock_consistency_violation",level:2},{value:"Fixing Lock Consistency Violation reports",id:"fixing-lock-consistency-violation-reports",level:3},{value:"LOGGING_PRIVATE_DATA",id:"logging_private_data",level:2},{value:"MEMORY_LEAK_C",id:"memory_leak_c",level:2},{value:"Memory leak in C",id:"memory-leak-in-c",level:3},{value:"Memory leak in Objective-C",id:"memory-leak-in-objective-c",level:3},{value:"MEMORY_LEAK_CPP",id:"memory_leak_cpp",level:2},{value:"MISSING_REQUIRED_PROP",id:"missing_required_prop",level:2},{value:"Examples",id:"examples",level:2},{value:"MIXED_SELF_WEAKSELF",id:"mixed_self_weakself",level:2},{value:"MODIFIES_IMMUTABLE",id:"modifies_immutable",level:2},{value:"MULTIPLE_WEAKSELF",id:"multiple_weakself",level:2},{value:"NIL_BLOCK_CALL",id:"nil_block_call",level:2},{value:"NIL_BLOCK_CALL_LATENT",id:"nil_block_call_latent",level:2},{value:"NIL_INSERTION_INTO_COLLECTION",id:"nil_insertion_into_collection",level:2},{value:"Arrays",id:"arrays",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"NIL_INSERTION_INTO_COLLECTION_LATENT",id:"nil_insertion_into_collection_latent",level:2},{value:"NIL_MESSAGING_TO_NON_POD",id:"nil_messaging_to_non_pod",level:2},{value:"NIL_MESSAGING_TO_NON_POD_LATENT",id:"nil_messaging_to_non_pod_latent",level:2},{value:"NO_MATCHING_BRANCH_IN_TRY",id:"no_matching_branch_in_try",level:2},{value:"NO_MATCHING_BRANCH_IN_TRY_LATENT",id:"no_matching_branch_in_try_latent",level:2},{value:"NO_MATCHING_CASE_CLAUSE",id:"no_matching_case_clause",level:2},{value:"NO_MATCHING_CASE_CLAUSE_LATENT",id:"no_matching_case_clause_latent",level:2},{value:"NO_MATCHING_FUNCTION_CLAUSE",id:"no_matching_function_clause",level:2},{value:"NO_MATCHING_FUNCTION_CLAUSE_LATENT",id:"no_matching_function_clause_latent",level:2},{value:"NO_MATCH_OF_RHS",id:"no_match_of_rhs",level:2},{value:"NO_MATCH_OF_RHS_LATENT",id:"no_match_of_rhs_latent",level:2},{value:"NO_TRUE_BRANCH_IN_IF",id:"no_true_branch_in_if",level:2},{value:"NO_TRUE_BRANCH_IN_IF_LATENT",id:"no_true_branch_in_if_latent",level:2},{value:"NULLPTR_DEREFERENCE",id:"nullptr_dereference",level:2},{value:"Null dereference in Java",id:"null-dereference-in-java",level:3},{value:"Null dereference in C",id:"null-dereference-in-c",level:3},{value:"Null dereference in Objective-C",id:"null-dereference-in-objective-c",level:3},{value:"NULLPTR_DEREFERENCE_LATENT",id:"nullptr_dereference_latent",level:2},{value:"NULL_ARGUMENT",id:"null_argument",level:2},{value:"NULL_ARGUMENT_LATENT",id:"null_argument_latent",level:2},{value:"NULL_DEREFERENCE",id:"null_dereference",level:2},{value:"OPTIONAL_EMPTY_ACCESS",id:"optional_empty_access",level:2},{value:"OPTIONAL_EMPTY_ACCESS_LATENT",id:"optional_empty_access_latent",level:2},{value:"PREMATURE_NIL_TERMINATION_ARGUMENT",id:"premature_nil_termination_argument",level:2},{value:"PULSE_CONST_REFABLE",id:"pulse_const_refable",level:2},{value:"PULSE_READONLY_SHARED_PTR_PARAM",id:"pulse_readonly_shared_ptr_param",level:2},{value:"PULSE_RESOURCE_LEAK",id:"pulse_resource_leak",level:2},{value:"PULSE_UNINITIALIZED_VALUE",id:"pulse_uninitialized_value",level:2},{value:"PULSE_UNINITIALIZED_VALUE_LATENT",id:"pulse_uninitialized_value_latent",level:2},{value:"PULSE_UNNECESSARY_COPY",id:"pulse_unnecessary_copy",level:2},{value:"PULSE_UNNECESSARY_COPY_ASSIGNMENT",id:"pulse_unnecessary_copy_assignment",level:2},{value:"PULSE_UNNECESSARY_COPY_ASSIGNMENT_CONST",id:"pulse_unnecessary_copy_assignment_const",level:2},{value:"PULSE_UNNECESSARY_COPY_ASSIGNMENT_MOVABLE",id:"pulse_unnecessary_copy_assignment_movable",level:2},{value:"PULSE_UNNECESSARY_COPY_INTERMEDIATE",id:"pulse_unnecessary_copy_intermediate",level:2},{value:"PULSE_UNNECESSARY_COPY_INTERMEDIATE_CONST",id:"pulse_unnecessary_copy_intermediate_const",level:2},{value:"PULSE_UNNECESSARY_COPY_MOVABLE",id:"pulse_unnecessary_copy_movable",level:2},{value:"PULSE_UNNECESSARY_COPY_OPTIONAL",id:"pulse_unnecessary_copy_optional",level:2},{value:"PULSE_UNNECESSARY_COPY_OPTIONAL_CONST",id:"pulse_unnecessary_copy_optional_const",level:2},{value:"PULSE_UNNECESSARY_COPY_RETURN",id:"pulse_unnecessary_copy_return",level:2},{value:"PURE_FUNCTION",id:"pure_function",level:2},{value:"QUANDARY_TAINT_ERROR",id:"quandary_taint_error",level:2},{value:"REGEX_OP_ON_UI_THREAD",id:"regex_op_on_ui_thread",level:2},{value:"RESOURCE_LEAK",id:"resource_leak",level:2},{value:"Resource leak in C",id:"resource-leak-in-c",level:3},{value:"Resource leak in Java",id:"resource-leak-in-java",level:3},{value:"Basics and Standard Idiom",id:"basics-and-standard-idiom",level:3},{value:"Multiple Resources Bugs",id:"multiple-resources-bugs",level:4},{value:"Nested_Allocations",id:"nested_allocations",level:3},{value:"Allocation of JSonParser and Cursor resources",id:"allocation-of-jsonparser-and-cursor-resources",level:3},{value:"Escaping resources and exceptions",id:"escaping-resources-and-exceptions",level:3},{value:"Java 7&#39;s try-with-resources",id:"java-7s-try-with-resources",level:3},{value:"RETAIN_CYCLE",id:"retain_cycle",level:2},{value:"SCOPE_LEAKAGE",id:"scope_leakage",level:2},{value:"SENSITIVE_DATA_FLOW",id:"sensitive_data_flow",level:2},{value:"SHELL_INJECTION",id:"shell_injection",level:2},{value:"SHELL_INJECTION_RISK",id:"shell_injection_risk",level:2},{value:"SQL_INJECTION",id:"sql_injection",level:2},{value:"SQL_INJECTION_RISK",id:"sql_injection_risk",level:2},{value:"STACK_VARIABLE_ADDRESS_ESCAPE",id:"stack_variable_address_escape",level:2},{value:"STARVATION",id:"starvation",level:2},{value:"STATIC_INITIALIZATION_ORDER_FIASCO",id:"static_initialization_order_fiasco",level:2},{value:"STRICT_MODE_VIOLATION",id:"strict_mode_violation",level:2},{value:"STRONG_SELF_NOT_CHECKED",id:"strong_self_not_checked",level:2},{value:"TAINT_ERROR",id:"taint_error",level:2},{value:"THREAD_SAFETY_VIOLATION",id:"thread_safety_violation",level:2},{value:"Thread-safety: What is a data race",id:"thread-safety-what-is-a-data-race",level:3},{value:"Thread-safety: Potential fixes",id:"thread-safety-potential-fixes",level:3},{value:"Thread-safety: Conditions checked before reporting",id:"thread-safety-conditions-checked-before-reporting",level:3},{value:"Thread-safety: Thread annotations recognized by RacerD",id:"thread-safety-thread-annotations-recognized-by-racerd",level:3},{value:"Thread-safety: Other annotations and what they do",id:"thread-safety-other-annotations-and-what-they-do",level:3},{value:"TOPL_ERROR",id:"topl_error",level:2},{value:"TOPL_ERROR_LATENT",id:"topl_error_latent",level:2},{value:"UNINITIALIZED_VALUE",id:"uninitialized_value",level:2},{value:"UNTRUSTED_BUFFER_ACCESS",id:"untrusted_buffer_access",level:2},{value:"UNTRUSTED_DESERIALIZATION",id:"untrusted_deserialization",level:2},{value:"UNTRUSTED_DESERIALIZATION_RISK",id:"untrusted_deserialization_risk",level:2},{value:"UNTRUSTED_ENVIRONMENT_CHANGE_RISK",id:"untrusted_environment_change_risk",level:2},{value:"UNTRUSTED_FILE",id:"untrusted_file",level:2},{value:"UNTRUSTED_FILE_RISK",id:"untrusted_file_risk",level:2},{value:"UNTRUSTED_HEAP_ALLOCATION",id:"untrusted_heap_allocation",level:2},{value:"UNTRUSTED_INTENT_CREATION",id:"untrusted_intent_creation",level:2},{value:"UNTRUSTED_URL_RISK",id:"untrusted_url_risk",level:2},{value:"UNTRUSTED_VARIABLE_LENGTH_ARRAY",id:"untrusted_variable_length_array",level:2},{value:"USER_CONTROLLED_SQL_RISK",id:"user_controlled_sql_risk",level:2},{value:"USE_AFTER_DELETE",id:"use_after_delete",level:2},{value:"USE_AFTER_DELETE_LATENT",id:"use_after_delete_latent",level:2},{value:"USE_AFTER_FREE",id:"use_after_free",level:2},{value:"USE_AFTER_FREE_LATENT",id:"use_after_free_latent",level:2},{value:"USE_AFTER_LIFETIME",id:"use_after_lifetime",level:2},{value:"USE_AFTER_LIFETIME_LATENT",id:"use_after_lifetime_latent",level:2},{value:"VECTOR_INVALIDATION",id:"vector_invalidation",level:2},{value:"VECTOR_INVALIDATION_LATENT",id:"vector_invalidation_latent",level:2},{value:"WEAK_SELF_IN_NO_ESCAPE_BLOCK",id:"weak_self_in_no_escape_block",level:2}],u={toc:d},h="wrapper";function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Here is an overview of the issue types currently reported by Infer."),(0,l.kt)("h2",{id:"arbitrary_code_execution_under_lock"},"ARBITRARY_CODE_EXECUTION_UNDER_LOCK"),(0,l.kt)("p",null,'Reported as "Arbitrary Code Execution Under lock" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"A call that may execute arbitrary code (such as registered, or chained, callbacks) is made while holding a lock.\nThis code may deadlock whenever the callbacks obtain locks themselves, so it is an unsafe pattern."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  SettableFuture future = null;\n\n  public void callFutureSet() {\n    future.set(null);\n  }\n\n  // synchronized means it's taking a lock implicitly\n  public synchronized void example_of_bad_pattern() {\n    callFutureSet(); // <- issue reported here\n  }\n\n  // If the call is made while holding multiple locks, the warning\n  // will be issued only at the innermost lock acquisition. Here we\n  // report in example_of_bad_pattern but we won't report below.\n  public void nested_bad_pattern_no_report(Object o) {\n    synchronized (o) {\n      example_of_bad_pattern(); // <- no issue reported\n    }\n  }\n")),(0,l.kt)("h2",{id:"autoreleasepool_size_complexity_increase"},"AUTORELEASEPOOL_SIZE_COMPLEXITY_INCREASE"),(0,l.kt)("p",null,'Reported as "Autoreleasepool Size Complexity Increase" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"[","EXPERIMENTAL","]"," Infer reports this issue when the ObjC autoreleasepool's size complexity of a\nprogram increases in degree: e.g. from constant to linear or from logarithmic to quadratic. This\nissue type is only reported in differential mode: i.e when we are comparing the analysis results of\ntwo runs of infer on a file."),(0,l.kt)("h2",{id:"autoreleasepool_size_complexity_increase_ui_thread"},"AUTORELEASEPOOL_SIZE_COMPLEXITY_INCREASE_UI_THREAD"),(0,l.kt)("p",null,'Reported as "Autoreleasepool Size Complexity Increase Ui Thread" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"[","EXPERIMENTAL","]"," Infer reports this issue when the ObjC autoreleasepool's complexity of the\nprocedure increases in degree ",(0,l.kt)("strong",{parentName:"p"},"and")," the procedure runs on the UI (main) thread."),(0,l.kt)("p",null,"Infer considers a method as running on the UI thread whenever:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The method, one of its overrides, its class, or an ancestral class, is annotated with ",(0,l.kt)("inlineCode",{parentName:"li"},"@UiThread"),"."),(0,l.kt)("li",{parentName:"ul"},"The method, or one of its overrides is annotated with ",(0,l.kt)("inlineCode",{parentName:"li"},"@OnEvent"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"@OnClick"),", etc."),(0,l.kt)("li",{parentName:"ul"},"The method or its callees call a ",(0,l.kt)("inlineCode",{parentName:"li"},"Litho.ThreadUtils")," method such as ",(0,l.kt)("inlineCode",{parentName:"li"},"assertMainThread"),".")),(0,l.kt)("h2",{id:"autoreleasepool_size_unreachable_at_exit"},"AUTORELEASEPOOL_SIZE_UNREACHABLE_AT_EXIT"),(0,l.kt)("p",null,'Reported as "Autoreleasepool Size Unreachable At Exit" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"[","EXPERIMENTAL","]"," This issue type indicates that the program's execution doesn't reach the exit\nnode. Hence, we cannot compute a static bound of ObjC autoreleasepool's size for the procedure."),(0,l.kt)("h2",{id:"bad_arg"},"BAD_ARG"),(0,l.kt)("p",null,'Reported as "Bad Arg" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Bad arg in Erlang: Reports an error when the type of an argument is wrong or the argument is badly formed. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"badarg")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, trying to concatenate the number ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," with  the list ",(0,l.kt)("inlineCode",{parentName:"p"},"[1,2]")," gives ",(0,l.kt)("inlineCode",{parentName:"p"},"badarg")," error because ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," is not a list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"f() ->\n    3 ++ [1,2]. // badarg error\n")),(0,l.kt)("p",null,"Note that although the first argument needs to be a list, the second argument may not be a list.\nFor instance, concatenating ","[1,2]"," with the number ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," raises no error in Erlang."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"g() ->\n    [1,2] ++ 3. // no error. Result: [1,2|3]\n")),(0,l.kt)("h2",{id:"bad_arg_latent"},"BAD_ARG_LATENT"),(0,l.kt)("p",null,'Reported as "Bad Arg Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#bad_arg"},"BAD_ARG"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"bad_key"},"BAD_KEY"),(0,l.kt)("p",null,'Reported as "Bad Key" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Bad key in Erlang: Reports an error when trying to access or update a non-existing key in a map. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"{badkey,K}")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, trying to update the key ",(0,l.kt)("inlineCode",{parentName:"p"},"2")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"M")," gives ",(0,l.kt)("inlineCode",{parentName:"p"},"{badkey,2}")," error because ",(0,l.kt)("inlineCode",{parentName:"p"},"2")," is not present as a key in ",(0,l.kt)("inlineCode",{parentName:"p"},"M"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"f() ->\n    M = #{},\n    M#{2 := 3}.\n")),(0,l.kt)("p",null,"Note that maps currently use a recency abstraction, meaning that only the most recent key/value is tracked.\nTherefore, if a map is non-empty and we try to access a key other than the one we track, we just assume that it is there to avoid false positives."),(0,l.kt)("h2",{id:"bad_key_latent"},"BAD_KEY_LATENT"),(0,l.kt)("p",null,'Reported as "Bad Key Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#bad_key"},"BAD_KEY"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"bad_map"},"BAD_MAP"),(0,l.kt)("p",null,'Reported as "Bad Map" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Bad map in Erlang: Reports an error when trying to access or update a key for a term that is not a map. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"{badmap,...}")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, trying to update ",(0,l.kt)("inlineCode",{parentName:"p"},"L")," as if it was a map gives ",(0,l.kt)("inlineCode",{parentName:"p"},"{badmap,[1,2,3]}")," error because ",(0,l.kt)("inlineCode",{parentName:"p"},"L")," is actually a list (",(0,l.kt)("inlineCode",{parentName:"p"},"[1,2,3]"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"f() ->\n    L = [1,2,3],\n    L#{1 => 2}.\n")),(0,l.kt)("h2",{id:"bad_map_latent"},"BAD_MAP_LATENT"),(0,l.kt)("p",null,'Reported as "Bad Map Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#bad_map"},"BAD_MAP"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"bad_record"},"BAD_RECORD"),(0,l.kt)("p",null,'Reported as "Bad Record" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Bad record in Erlang: Reports an error when trying to access or update a record with the wrong name. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"{badrecord,Name}")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, accessing ",(0,l.kt)("inlineCode",{parentName:"p"},"R")," as a ",(0,l.kt)("inlineCode",{parentName:"p"},"person")," record gives ",(0,l.kt)("inlineCode",{parentName:"p"},"{badrecord,person}")," error because ",(0,l.kt)("inlineCode",{parentName:"p"},"R")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"rabbit")," (even though both share the ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," field)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},'-record(person, {name, phone}).\n-record(rabbit, {name, color}).\n\nf() ->\n    R = #rabbit{name = "Bunny", color = "Brown"},\n    R#person.name.\n')),(0,l.kt)("h2",{id:"bad_record_latent"},"BAD_RECORD_LATENT"),(0,l.kt)("p",null,'Reported as "Bad Record Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#bad_record"},"BAD_RECORD"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"bad_return"},"BAD_RETURN"),(0,l.kt)("p",null,'Reported as "Bad Return" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Bad return in Erlang: The dynamic type of a returned value disagrees with the static type given in the spec."),(0,l.kt)("p",null,"For example, this function returns an integer, while the spec says it returns an atom."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"-spec f() -> atom().\nf() -> 1.\n")),(0,l.kt)("p",null,"Note that this will ",(0,l.kt)("em",{parentName:"p"},"not")," lead to a runtime error when running the Erlang program."),(0,l.kt)("h2",{id:"bad_return_latent"},"BAD_RETURN_LATENT"),(0,l.kt)("p",null,'Reported as "Bad Return Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#bad_return"},"BAD_RETURN"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"biabduction_memory_leak"},"BIABDUCTION_MEMORY_LEAK"),(0,l.kt)("p",null,'Reported as "Memory Leak" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#memory_leak"},"MEMORY_LEAK"),"."),(0,l.kt)("h2",{id:"biabduction_retain_cycle"},"BIABDUCTION_RETAIN_CYCLE"),(0,l.kt)("p",null,'Reported as "Biabduction Retain Cycle" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#retain_cycle"},"RETAIN_CYCLE"),"."),(0,l.kt)("h2",{id:"block_parameter_not_null_checked"},"BLOCK_PARAMETER_NOT_NULL_CHECKED"),(0,l.kt)("p",null,'Reported as "Block Parameter Not Null Checked" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-parameter-not-null-checked"},"parameter-not-null-checked"),"."),(0,l.kt)("p",null,"This error type is reported only in Objective-C/Objective-C++. It happens when a method has a block as a parameter,\nand the block is executed in the method's body without checking it for ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," first. If a ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," block is passed to\nthe method, then this will cause a crash. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"- (void)uploadTaskWithRequest:(NSURLRequest*)urlRequest\n                       fromFile:(NSURL*)fileURL\n                       delegate:(id)delegate\n                  delegateQueue:(NSOperationQueue*)delegateQueue\n                     completion:(void (^)())completion {\n     ...\n    completion();\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),":\nPossible solutions are adding a check for ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),", or making sure that the method\nis not ever called with ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),". When an argument will never be ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),", you can add\nthe annotation ",(0,l.kt)("inlineCode",{parentName:"p"},"nonnull")," to the argument's type, to tell Infer (and the type\nsystem), that the argument won't be ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),". This will silence the warning."),(0,l.kt)("h2",{id:"buffer_overrun_l1"},"BUFFER_OVERRUN_L1"),(0,l.kt)("p",null,'Reported as "Buffer Overrun L1" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"This is reported when outside of buffer bound is accessed.  It can corrupt memory and may introduce\nsecurity issues in C/C++."),(0,l.kt)("p",null,"For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int a[3]; a[5] = 42;")," generates a ",(0,l.kt)("inlineCode",{parentName:"p"},"BUFFER_OVERRUN_L1")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"a[5] = 42;"),"."),(0,l.kt)("p",null,'Buffer overrun reports fall into several "buckets" corresponding to the expected precision of the\nreport.  The higher the number, the more likely it is to be a false positive.'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L1"),": The most faithful report, when it ",(0,l.kt)("em",{parentName:"p"},"must")," be unsafe.  For example, array size: ",(0,l.kt)("inlineCode",{parentName:"p"},"[3,3]"),",\noffset: ",(0,l.kt)("inlineCode",{parentName:"p"},"[5,5]"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L2"),": Less faithful report than ",(0,l.kt)("inlineCode",{parentName:"p"},"L1"),", when it ",(0,l.kt)("em",{parentName:"p"},"may")," be unsafe.  For example, array size:",(0,l.kt)("inlineCode",{parentName:"p"},"[3,3]"),",\noffset: ",(0,l.kt)("inlineCode",{parentName:"p"},"[0,5]"),".  Note that the offset may be a safe value in the real execution, i.e. safe when\n0, 1, or 2; unsafe when 3, 4, or 5.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L5"),": The least faithful report, when there is an interval top.  For example, array size:\n",(0,l.kt)("inlineCode",{parentName:"p"},"[3,3]"),", offset: ",(0,l.kt)("inlineCode",{parentName:"p"},"[-oo,+oo]"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L4"),": More faithful report than ",(0,l.kt)("inlineCode",{parentName:"p"},"L5"),", when there is an infinity value.  For example, array size:\n",(0,l.kt)("inlineCode",{parentName:"p"},"[3,3]"),", offset: ",(0,l.kt)("inlineCode",{parentName:"p"},"[0, +oo]"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L3"),": The reports that are not included in the above cases.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"S2"),": An array access is unsafe by symbolic values.  For example, array size: ",(0,l.kt)("inlineCode",{parentName:"p"},"[n,n]"),", offset\n",(0,l.kt)("inlineCode",{parentName:"p"},"[n,+oo]"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"U5"),": An array access is unsafe by unknown values, which are usually from unknown function\ncalls."))),(0,l.kt)("h2",{id:"buffer_overrun_l2"},"BUFFER_OVERRUN_L2"),(0,l.kt)("p",null,'Reported as "Buffer Overrun L2" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#buffer_overrun_l1"},"BUFFER_OVERRUN_L1")),(0,l.kt)("h2",{id:"buffer_overrun_l3"},"BUFFER_OVERRUN_L3"),(0,l.kt)("p",null,'Reported as "Buffer Overrun L3" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#buffer_overrun_l1"},"BUFFER_OVERRUN_L1")),(0,l.kt)("h2",{id:"buffer_overrun_l4"},"BUFFER_OVERRUN_L4"),(0,l.kt)("p",null,'Reported as "Buffer Overrun L4" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#buffer_overrun_l1"},"BUFFER_OVERRUN_L1")),(0,l.kt)("h2",{id:"buffer_overrun_l5"},"BUFFER_OVERRUN_L5"),(0,l.kt)("p",null,'Reported as "Buffer Overrun L5" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#buffer_overrun_l1"},"BUFFER_OVERRUN_L1")),(0,l.kt)("h2",{id:"buffer_overrun_s2"},"BUFFER_OVERRUN_S2"),(0,l.kt)("p",null,'Reported as "Buffer Overrun S2" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#buffer_overrun_l1"},"BUFFER_OVERRUN_L1")),(0,l.kt)("h2",{id:"buffer_overrun_u5"},"BUFFER_OVERRUN_U5"),(0,l.kt)("p",null,'Reported as "Buffer Overrun U5" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#buffer_overrun_l1"},"BUFFER_OVERRUN_L1")),(0,l.kt)("h2",{id:"captured_strong_self"},"CAPTURED_STRONG_SELF"),(0,l.kt)("p",null,'Reported as "Captured strongSelf" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-self-in-block"},"self-in-block"),"."),(0,l.kt)("p",null,"This check is about when a strong pointer to ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," is captured in a block.\nThis could lead to retain cycles or unexpected behavior since to avoid retain\ncycles one usually uses a local strong pointer or a captured weak pointer instead."),(0,l.kt)("p",null,"This will happen in one of two cases generally:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"One uses ",(0,l.kt)("inlineCode",{parentName:"li"},"weakSelf")," but forgot to declare it weak first.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __typeof(self) weakSelf = self;\n  int (^my_block)(BOOL) = ^(BOOL isTapped) {\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n    return strongSelf->x;\n  };\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action:")," Replace the first line with ",(0,l.kt)("inlineCode",{parentName:"p"},"__weak __typeof(self) weakSelf = self;"),"."),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"One is using ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf"),", declared in a block, in another inner block.\nThe retain cycle is avoided in the outer block because ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," is a\nlocal variable of the block. If ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," is used in the inner block,\nthen it's not a local variable anymore, but a captured variable."),(0,l.kt)("p",{parentName:"li"},"Example:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong typeof(self) strongSelf = weakSelf;\n    if (strongSelf) {\n      int (^my_block)() = ^() {\n        int x = strongSelf->x;\n        ...\n      };\n      ...\n    }\n    ...\n  };\n")),(0,l.kt)("p",null,"In this example, ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," is a captured variable of the inner block, and this could cause retain cycles."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action:")," Use a new pointer to self local to the inner block. In the example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong typeof(self) strongSelf = weakSelf;\n    if (strongSelf) {\n      int (^my_block)() = ^() {\n         __typeof(self) innerStrongSelf = weakSelf;\n        int x = innerStrongSelf->x;\n        ...\n      };\n      ...\n    }\n    ...\n  };\n")),(0,l.kt)("p",null,"Or, to improve readability, move the inner block logic into a separate method."),(0,l.kt)("p",null,"Another solution could be to copy the instance variable that one needs to access inside the inner block to a local variable, and use the local variable instead:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong typeof(self) strongSelf = weakSelf;\n    if (strongSelf) {\n      int my_x = strongSelf->x;\n      int (^my_block)() = ^() {\n        int x = my_x;\n        ...\n      };\n      ...\n    }\n    ...\n  };\n")),(0,l.kt)("h2",{id:"checkers_allocates_memory"},"CHECKERS_ALLOCATES_MEMORY"),(0,l.kt)("p",null,'Reported as "Allocates Memory" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-annotation-reachability"},"annotation-reachability"),"."),(0,l.kt)("p",null,"A method annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@NoAllocation")," transitively calls ",(0,l.kt)("inlineCode",{parentName:"p"},"new"),"."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class C implements I {\n  @NoAllocation\n  void directlyAllocatingMethod() {\n    new Object();\n  }\n}\n")),(0,l.kt)("h2",{id:"checkers_annotation_reachability_error"},"CHECKERS_ANNOTATION_REACHABILITY_ERROR"),(0,l.kt)("p",null,'Reported as "Annotation Reachability Error" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-annotation-reachability"},"annotation-reachability"),"."),(0,l.kt)("p",null,"A method annotated with an annotation ",(0,l.kt)("inlineCode",{parentName:"p"},"@A")," transitively calls a method annotated ",(0,l.kt)("inlineCode",{parentName:"p"},"@B")," where the combination of annotations is forbidden (for example, ",(0,l.kt)("inlineCode",{parentName:"p"},"@UiThread")," calling ",(0,l.kt)("inlineCode",{parentName:"p"},"@WorkerThread"),")."),(0,l.kt)("h2",{id:"checkers_calls_expensive_method"},"CHECKERS_CALLS_EXPENSIVE_METHOD"),(0,l.kt)("p",null,'Reported as "Expensive Method Called" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-annotation-reachability"},"annotation-reachability"),"."),(0,l.kt)("p",null,"A method annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@PerformanceCritical")," transitively calls a method annotated ",(0,l.kt)("inlineCode",{parentName:"p"},"@Expensive"),"."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class C {\n  @PerformanceCritical\n  void perfCritical() {\n    expensive();\n  }\n\n  @Expensive\n  void expensive() {}\n}\n")),(0,l.kt)("h2",{id:"checkers_expensive_overrides_unannotated"},"CHECKERS_EXPENSIVE_OVERRIDES_UNANNOTATED"),(0,l.kt)("p",null,'Reported as "Expensive Overrides Unannotated" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-annotation-reachability"},"annotation-reachability"),"."),(0,l.kt)("p",null,"A method annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Expensive")," overrides an un-annotated method."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"interface I {\n  void foo();\n}\n\nclass A implements I {\n  @Expensive\n  public void foo() {}\n}\n")),(0,l.kt)("h2",{id:"checkers_fragment_retains_view"},"CHECKERS_FRAGMENT_RETAINS_VIEW"),(0,l.kt)("p",null,'Reported as "Fragment Retains View" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-fragment-retains-view"},"fragment-retains-view"),"."),(0,l.kt)("p",null,"This error type is Android-specific. It fires when a ",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment")," type fails to\nnullify one or more of its declared ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," fields in ",(0,l.kt)("inlineCode",{parentName:"p"},"onDestroyView"),". In\nperformance-sensitive applications, a ",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment")," should initialize all ",(0,l.kt)("inlineCode",{parentName:"p"},"View"),"'s\nin ",(0,l.kt)("inlineCode",{parentName:"p"},"onCreateView")," and nullify them in ",(0,l.kt)("inlineCode",{parentName:"p"},"onDestroyView"),". If a ",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment")," is placed\non the back stack and fails to nullify a ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"onDestroyView"),", it will\nretain a useless reference to that ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," that will not be cleaned up until the\n",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment")," is resumed or destroyed."),(0,l.kt)("p",null,"Action: Nullify the ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," in question in ",(0,l.kt)("inlineCode",{parentName:"p"},"onDestroyView"),"."),(0,l.kt)("h2",{id:"checkers_immutable_cast"},"CHECKERS_IMMUTABLE_CAST"),(0,l.kt)("p",null,'Reported as "Checkers Immutable Cast" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-immutable-cast"},"immutable-cast"),"."),(0,l.kt)("p",null,"This error type is reported in Java. It fires when an immutable collection is\nreturned from a method whose type is mutable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  public List<String> getSomeList() {\n    ImmutableList<String> l = foo(...);\n    return l;\n  }\n")),(0,l.kt)("p",null,"This can lead to a runtime error if users of ",(0,l.kt)("inlineCode",{parentName:"p"},"getSomeList")," try to modify the\nlist e.g. by adding elements."),(0,l.kt)("p",null,"Action: you can change the return type to be immutable, or make a copy of the\ncollection so that it can be modified."),(0,l.kt)("h2",{id:"checkers_printf_args"},"CHECKERS_PRINTF_ARGS"),(0,l.kt)("p",null,'Reported as "Checkers Printf Args" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-printf-args"},"printf-args"),"."),(0,l.kt)("p",null,"This error is reported when the argument types to a ",(0,l.kt)("inlineCode",{parentName:"p"},"printf")," method do not match the format string."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  void stringInsteadOfInteger(PrintStream out) {\n    out.printf("Hello %d", "world");\n  }\n')),(0,l.kt)("p",null,"Action: fix the mismatch between format string and argument types."),(0,l.kt)("h2",{id:"config_impact"},"CONFIG_IMPACT"),(0,l.kt)("p",null,'Reported as "Config Impact" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-config-impact-analysis"},"config-impact-analysis"),"."),(0,l.kt)("p",null,"Infer reports this issue when an ",(0,l.kt)("em",{parentName:"p"},"expensive")," function is called without a ",(0,l.kt)("em",{parentName:"p"},"config check"),".  The\n",(0,l.kt)("em",{parentName:"p"},"config")," is usually a boolean value that enables experimental new features and it is defined per\napplication/codebase, e.g. gatekeepers.  To determine whether a function is expensive or not, the\nchecker relies on ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"Cost analysis")," results and modeled functions that are\nassumed to be expensive, e.g. string operations, regular expression match, or DB accesses."),(0,l.kt)("p",null,"Similar to ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"Cost analysis"),", this issue type is reported only in\ndifferential mode, i.e. when there are original code and modified one and we can compare Infer's\nresults on both of them."),(0,l.kt)("p",null,"For instance, if we have the following code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// version1\nfoo();\nif (config_check){\n   bar();\n}\n")),(0,l.kt)("p",null,"which is then modified to next"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// version2\nfoo();\nif (config_check){\n   bar();\n}\ngoo(); // added\n")),(0,l.kt)("p",null,'the analysis would warn the developer that "',(0,l.kt)("inlineCode",{parentName:"p"},"goo()"),' is a newly added function call and it might\ncause an unexpected new behavior". However, if we were to add ',(0,l.kt)("inlineCode",{parentName:"p"},"goo()")," right after ",(0,l.kt)("inlineCode",{parentName:"p"},"bar()"),", then\nInfer wouldn't warn about it because it is already gated under the ",(0,l.kt)("inlineCode",{parentName:"p"},"config_check"),"."),(0,l.kt)("p",null,"The analysis is inter-procedural: it can reason about impacts by code changes not only inside a\nsingle procedure, but also the impacts that are propagated by function calls. Thus, if we were to\nmodify ",(0,l.kt)("inlineCode",{parentName:"p"},"version1")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"version3")," below by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"goo()")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"foo()"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// version3\nvoid foo(){\n   // ....\n   goo(); // added\n}\n")),(0,l.kt)("p",null,"then the analysis will report a ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG_IMPACT")," issue on the ungated call site of ",(0,l.kt)("inlineCode",{parentName:"p"},"foo()"),"."),(0,l.kt)("p",null,"Currently, the analysis supports both Objective-C and Java but not C++."),(0,l.kt)("p",null,"Action: Make sure the ungated code change is semantically correct and harmless in terms of execution\ncost.  If you are not sure, gate it with a new or pre-existing config."),(0,l.kt)("h2",{id:"config_impact_strict"},"CONFIG_IMPACT_STRICT"),(0,l.kt)("p",null,'Reported as "Config Impact Strict" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-config-impact-analysis"},"config-impact-analysis"),"."),(0,l.kt)("p",null,"This is similar to ",(0,l.kt)("a",{parentName:"p",href:"#config_impact"},(0,l.kt)("inlineCode",{parentName:"a"},"CONFIG_IMPACT")," issue")," but the analysis reports ",(0,l.kt)("strong",{parentName:"p"},"all")," ungated\ncodes irrespective of whether they are expensive or not."),(0,l.kt)("h2",{id:"config_impact_strict_beta"},"CONFIG_IMPACT_STRICT_BETA"),(0,l.kt)("p",null,'Reported as "Config Impact Strict Beta" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-config-impact-analysis"},"config-impact-analysis"),"."),(0,l.kt)("p",null,"This is similar to ",(0,l.kt)("a",{parentName:"p",href:"#config_impact_strict"},(0,l.kt)("inlineCode",{parentName:"a"},"CONFIG_IMPACT_STRICT")," issue")," but it is only used for\nbeta testing that fine-tunes the checker to analysis targets."),(0,l.kt)("h2",{id:"config_usage"},"CONFIG_USAGE"),(0,l.kt)("p",null,'Reported as "Config Usage" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Infer reports this issue when a ",(0,l.kt)("em",{parentName:"p"},"config")," value is used as branch condition in a function.  The\n",(0,l.kt)("em",{parentName:"p"},"config")," is usually a boolean value that enables experimental new features and it is defined per\napplication/codebase, e.g. gatekeepers."),(0,l.kt)("p",null,"For instance, if we have the following code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void foo() {\n  if(config_check("my_new_feature")){ ... }\n}\n')),(0,l.kt)("p",null,'then analysis would provide information that "the function ',(0,l.kt)("inlineCode",{parentName:"p"},"foo")," uses the config ",(0,l.kt)("inlineCode",{parentName:"p"},"my_new_feature"),' as\nbranch condition".'),(0,l.kt)("p",null,"Note: This type of issue is only for providing semantic information, rather than warning or\nreporting actual problem."),(0,l.kt)("h2",{id:"constant_address_dereference"},"CONSTANT_ADDRESS_DEREFERENCE"),(0,l.kt)("p",null,'Reported as "Constant Address Dereference" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This is reported when an address at an absolute location, e.g. 1234,\nis dereferenced. It is a more general version of the\n",(0,l.kt)("a",{parentName:"p",href:"#nullptr_dereference"},(0,l.kt)("inlineCode",{parentName:"a"},"NULLPTR_DEREFERENCE"))," error type that is\nreported when the address is a constant other than zero."),(0,l.kt)("p",null,"For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int *p = (int *) 123; *p = 42;")," generates a ",(0,l.kt)("inlineCode",{parentName:"p"},"CONSTANT_ADDRESS_DEREFERENCE")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"*p = 42;"),"."),(0,l.kt)("p",null,"For more information see the ",(0,l.kt)("a",{parentName:"p",href:"#nullptr_dereference"},(0,l.kt)("inlineCode",{parentName:"a"},"NULLPTR_DEREFERENCE"))," issue type."),(0,l.kt)("h2",{id:"constant_address_dereference_latent"},"CONSTANT_ADDRESS_DEREFERENCE_LATENT"),(0,l.kt)("p",null,'Reported as "Constant Address Dereference Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#constant_address_dereference"},"CONSTANT_ADDRESS_DEREFERENCE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"create_intent_from_uri"},"CREATE_INTENT_FROM_URI"),(0,l.kt)("p",null,'Reported as "Create Intent From Uri" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Create an intent/start a component using a (possibly user-controlled) URI. may or may not be an issue depending on where the URI comes from."),(0,l.kt)("h2",{id:"cross_site_scripting"},"CROSS_SITE_SCRIPTING"),(0,l.kt)("p",null,'Reported as "Cross Site Scripting" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted data flows into HTML; XSS risk."),(0,l.kt)("h2",{id:"dangling_pointer_dereference"},"DANGLING_POINTER_DEREFERENCE"),(0,l.kt)("p",null,'Reported as "Dangling Pointer Dereference" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("h2",{id:"datalog_fact"},"DATALOG_FACT"),(0,l.kt)("p",null,'Reported as "Datalog Fact" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-datalog"},"datalog"),"."),(0,l.kt)("p",null,"Datalog fact used as input for a datalog solver."),(0,l.kt)("h2",{id:"data_flow_to_sink"},"DATA_FLOW_TO_SINK"),(0,l.kt)("p",null,'Reported as "Data Flow to Sink" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A flow of data was detected to a sink."),(0,l.kt)("h2",{id:"deadlock"},"DEADLOCK"),(0,l.kt)("p",null,'Reported as "Deadlock" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"This error is currently reported in Java. A deadlock occurs when two distinct\nthreads try to acquire two locks in reverse orders. The following code\nillustrates a textbook example. Of course, in real deadlocks, the lock\nacquisitions may be separated by deeply nested call chains."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  public void lockAThenB() {\n    synchronized(lockA) {\n      synchronized(lockB) {\n       // do something with both resources\n      }\n    }\n  }\n\n  public void lockBThenA() {\n    synchronized(lockB) {\n      synchronized(lockA) {\n       // do something with both resources\n      }\n    }\n  }\n")),(0,l.kt)("p",null,"The standard solution to a deadlock is to fix an order of lock acquisition and\nadhere to that order in all cases. Another solution may be to shrink the\ncritical sections (i.e., the code executing under lock) to the minimum required."),(0,l.kt)("p",null,"Old-style containers such as ",(0,l.kt)("inlineCode",{parentName:"p"},"Vector")," are synchronized on the object monitor,\nwhich means that deadlocks can occur even without explicit synchronisation on\nboth threads. For instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  public void lockAThenAddToVector() {\n    synchronized(lockA) {\n      vector.add(object);\n    }\n  }\n\n  public void lockVectorThenA() {\n    synchronized(vector) {\n      synchronized(lockA) {\n       // do something with both resources\n      }\n    }\n  }\n")),(0,l.kt)("p",null,"Infer has support for detecting these deadlocks too."),(0,l.kt)("p",null,"To suppress reports of deadlocks in a method ",(0,l.kt)("inlineCode",{parentName:"p"},"m()")," use the\n",(0,l.kt)("inlineCode",{parentName:"p"},'@SuppressLint("DEADLOCK")')," annotation, as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  import android.annotation.SuppressLint;\n\n  @SuppressLint("DEADLOCK")\n  public void m() {\n  ...\n  }\n')),(0,l.kt)("h2",{id:"dead_store"},"DEAD_STORE"),(0,l.kt)("p",null,'Reported as "Dead Store" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-liveness"},"liveness"),"."),(0,l.kt)("p",null,"This error is reported in C++. It fires when the value assigned to a variables\nis never used (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"int i = 1; i = 2; return i;"),")."),(0,l.kt)("h2",{id:"divide_by_zero"},"DIVIDE_BY_ZERO"),(0,l.kt)("p",null,'Reported as "Divide By Zero" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("h2",{id:"empty_vector_access"},"EMPTY_VECTOR_ACCESS"),(0,l.kt)("p",null,'Reported as "Empty Vector Access" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("p",null,"This error type is reported only in C++, in versions >= C++11."),(0,l.kt)("p",null,"The code is trying to access an element of a vector that Infer believes to be\nempty. Such an access will cause undefined behavior at runtime."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\nint foo(){\n  const std::vector<int> vec;\n  return vec[0]; // Empty vector access reported here\n}\n")),(0,l.kt)("h2",{id:"eradicate_annotation_graph"},"ERADICATE_ANNOTATION_GRAPH"),(0,l.kt)("p",null,'Reported as "Annotation Graph" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_bad_nested_class_annotation"},"ERADICATE_BAD_NESTED_CLASS_ANNOTATION"),(0,l.kt)("p",null,'Reported as "@Nullsafe annotation is inconsistent with outer class" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_condition_redundant"},"ERADICATE_CONDITION_REDUNDANT"),(0,l.kt)("p",null,'Reported as "Condition Redundant" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"This report is inactive by default. Condition (x != null) or (x == null) when x\ncannot be null: the first condition is always true and the second is always\nfalse"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'class C {\n  void m() {\n    String s = new String("abc");\n    if (s != null) {\n      int n = s.length();\n    }\n  }\n}\n')),(0,l.kt)("p",null,"Action: Make sure that the annotations are correct, as the condition is\nconsidered redundant based on the existing annotations. In particular, check the\nannotation of any input parameters and fields of the current method, as well as\nthe annotations of any method called directly by the current method, if\nrelevant. If the annotations are correct, you can remove the redundant case."),(0,l.kt)("h2",{id:"eradicate_field_not_initialized"},"ERADICATE_FIELD_NOT_INITIALIZED"),(0,l.kt)("p",null,'Reported as "Field Not Initialized" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"The constructor does not initialize a field f which is not annotated with\n@Nullable"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class C {\n  String f;\n\n  C () { // field f not initialized and not annotated @Nullable\n  }\n}\n")),(0,l.kt)("p",null,"Action: The preferred action is to initialize the field with a value that is not\nnull. If, by design, null is a valid value for the field, then it should be\nannotated with @Nullable."),(0,l.kt)("h2",{id:"eradicate_field_not_nullable"},"ERADICATE_FIELD_NOT_NULLABLE"),(0,l.kt)("p",null,'Reported as "Field Not Nullable" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"An assignment x.f = v where v could be null and field f is not annotated with\n@Nullable."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class C {\n  String f;\n\n  void foo(@Nullable String s) {\n    f = s;\n  }\n}\n")),(0,l.kt)("p",null,"Action: The preferred action is to ensure that a null value is never stored in\nthe field, by changing the code or changing annotations. If this cannot be done,\nadd a @Nullable annotation to the field. This annotation might trigger more\nwarnings in other code that uses the field, as that code must now deal with null\nvalues."),(0,l.kt)("h2",{id:"eradicate_field_over_annotated"},"ERADICATE_FIELD_OVER_ANNOTATED"),(0,l.kt)("p",null,'Reported as "Field Over Annotated" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_inconsistent_subclass_parameter_annotation"},"ERADICATE_INCONSISTENT_SUBCLASS_PARAMETER_ANNOTATION"),(0,l.kt)("p",null,'Reported as "Inconsistent Subclass Parameter Annotation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"A parameter of the overridden method is missing a @Nullable annotation present in the superclass."),(0,l.kt)("p",null,"Action: choose a consistent annotation based on the desired invariant."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class A {\n\n  int len(@Nullable String s) {\n    if (s != null) {\n      return s.length();\n    } else {\n      return 0;\n    }\n  }\n}\n\nclass B extends A {\n\n  int len(String s) {  // @Nullable missing.\n    return s.length();\n  }\n}\n")),(0,l.kt)("p",null,"A consistent use of @Nullable on parameters across subtyping should prevent runtime issue like in:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public class Main {\n\n  String s;\n\n  int foo() {\n    A a = new B();\n    return a.len(s);\n  }\n}\n")),(0,l.kt)("h2",{id:"eradicate_inconsistent_subclass_return_annotation"},"ERADICATE_INCONSISTENT_SUBCLASS_RETURN_ANNOTATION"),(0,l.kt)("p",null,'Reported as "Inconsistent Subclass Return Annotation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"The return type of the overridden method is annotated @Nullable, but the\ncorresponding method in the superclass is not."),(0,l.kt)("p",null,"Action: choose a consistent annotation based on the desired invariant."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'class A {\n  String create() {\n    return new String("abc");\n  }\n}\n\nclass B extends A {\n  @Nullable String create() {  // Inconsistent @Nullable annotation.\n      return null;\n  }\n}\n')),(0,l.kt)("p",null,"A consistent use of ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullable")," on the return type across subtyping should prevent\nruntime issue like in:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class Main {\n\n  int foo(A a) {\n     String s = a.create();\n     return s.length();\n  }\n\n  void main(String[] args) {\n     A a = new B();\n     foo(a);\n  }\n\n}\n")),(0,l.kt)("h2",{id:"eradicate_meta_class_can_be_nullsafe"},"ERADICATE_META_CLASS_CAN_BE_NULLSAFE"),(0,l.kt)("p",null,'Reported as "Class has 0 issues and can be marked @Nullsafe" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_meta_class_is_nullsafe"},"ERADICATE_META_CLASS_IS_NULLSAFE"),(0,l.kt)("p",null,'Reported as "Class is marked @Nullsafe and has 0 issues" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_meta_class_needs_improvement"},"ERADICATE_META_CLASS_NEEDS_IMPROVEMENT"),(0,l.kt)("p",null,'Reported as "Class needs improvement to become @Nullsafe" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"Reported when the class either:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"has at least one nullability issue, or"),(0,l.kt)("li",{parentName:"ul"},"has at least one (currently possibly hidden) issue preventing it from being marked ",(0,l.kt)("inlineCode",{parentName:"li"},"@Nullsafe"),".")),(0,l.kt)("h2",{id:"eradicate_nullable_dereference"},"ERADICATE_NULLABLE_DEREFERENCE"),(0,l.kt)("p",null,'Reported as "Nullable Dereference" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_parameter_not_nullable"},"ERADICATE_PARAMETER_NOT_NULLABLE"),(0,l.kt)("p",null,'Reported as "Parameter Not Nullable" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"Method call x.m(..., v, ...) where v can be null and the corresponding parameter\nin method m is not annotated with @Nullable"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class C {\n  void m(C x) {\n    String s = x.toString()\n  }\n\n  void test(@Nullable C x) {\n    m(x);\n  }\n}\n")),(0,l.kt)("p",null,"Action: The preferred action is to ensure that a null value is never passed to\nthe method, by changing the code or changing annotations. If this cannot be\ndone, add a @Nullable annotation to the relevant parameter in the method\ndeclaration. This annotation might trigger more warnings in the implementation\nof method m, as that code must now deal with null values."),(0,l.kt)("h2",{id:"eradicate_redundant_nested_class_annotation"},"ERADICATE_REDUNDANT_NESTED_CLASS_ANNOTATION"),(0,l.kt)("p",null,'Reported as "@Nullsafe annotation is redundant" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_return_not_nullable"},"ERADICATE_RETURN_NOT_NULLABLE"),(0,l.kt)("p",null,'Reported as "Return Not Nullable" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"Method m can return null, but the method's return type is not annotated with\n@Nullable"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class C {\n  String m() {\n    return null;\n  }\n}\n")),(0,l.kt)("p",null,"Action: The preferred action is to ensure that a null value is never returned by\nthe method, by changing the code or changing annotations. If this cannot be\ndone, add a @Nullable annotation to the method declaration. This annotation\nmight trigger more warnings in the callers of method m, as the callers must now\ndeal with null values."),(0,l.kt)("h2",{id:"eradicate_return_over_annotated"},"ERADICATE_RETURN_OVER_ANNOTATED"),(0,l.kt)("p",null,'Reported as "Return Over Annotated" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("p",null,"This report is inactive by default. Method m is annotated with @Nullable but the\nmethod cannot return null"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'class C {\n  @Nullable String m() {\n    String s = new String("abc");\n    return s;\n  }\n}\n')),(0,l.kt)("p",null,"Action: Make sure that the annotations are correct, as the return annotation is\nconsidered redundant based on the existing annotations. In particular, check the\nannotation of any input parameters and fields of the current method, as well as\nthe annotations of any method called directly by the current method, if\nrelevant. If the annotations are correct, you can remove the @Nullable\nannotation."),(0,l.kt)("h2",{id:"eradicate_unchecked_usage_in_nullsafe"},"ERADICATE_UNCHECKED_USAGE_IN_NULLSAFE"),(0,l.kt)("p",null,'Reported as "Nullsafe mode: unchecked usage of a value" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"eradicate_unvetted_third_party_in_nullsafe"},"ERADICATE_UNVETTED_THIRD_PARTY_IN_NULLSAFE"),(0,l.kt)("p",null,'Reported as "Nullsafe mode: unchecked usage of unvetted third-party" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-eradicate"},"eradicate"),"."),(0,l.kt)("h2",{id:"execution_time_complexity_increase"},"EXECUTION_TIME_COMPLEXITY_INCREASE"),(0,l.kt)("p",null,'Reported as "Execution Time Complexity Increase" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"Infer reports this issue when the execution time complexity of a\nprogram increases in degree: e.g. from constant to linear or from\nlogarithmic to quadratic. This issue type is only reported in\ndifferential mode: i.e when we are comparing the cost analysis results of\ntwo runs of infer on a file. Check out examples in ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost#examples"},"here"),"."),(0,l.kt)("h2",{id:"execution_time_complexity_increase_ui_thread"},"EXECUTION_TIME_COMPLEXITY_INCREASE_UI_THREAD"),(0,l.kt)("p",null,'Reported as "Execution Time Complexity Increase Ui Thread" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"Infer reports this issue when the execution time complexity of the procedure increases in degree ",(0,l.kt)("strong",{parentName:"p"},"and")," the procedure runs on the UI (main) thread."),(0,l.kt)("p",null,"Infer considers a method as running on the UI thread whenever:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The method, one of its overrides, its class, or an ancestral class, is\nannotated with ",(0,l.kt)("inlineCode",{parentName:"li"},"@UiThread"),"."),(0,l.kt)("li",{parentName:"ul"},"The method, or one of its overrides is annotated with ",(0,l.kt)("inlineCode",{parentName:"li"},"@OnEvent"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"@OnClick"),",\netc."),(0,l.kt)("li",{parentName:"ul"},"The method or its callees call a ",(0,l.kt)("inlineCode",{parentName:"li"},"Litho.ThreadUtils")," method such as\n",(0,l.kt)("inlineCode",{parentName:"li"},"assertMainThread"),".")),(0,l.kt)("h2",{id:"execution_time_unreachable_at_exit"},"EXECUTION_TIME_UNREACHABLE_AT_EXIT"),(0,l.kt)("p",null,'Reported as "Execution Time Unreachable At Exit" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"This issue type indicates that the program's execution doesn't reach\nthe exit node (where our analysis computes the final cost of the\nprocedure). Hence, we cannot compute a static bound for the procedure."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void exit_unreachable() {\n  exit(0); // modeled as unreachable\n}\n\nvoid infeasible_path_unreachable() {\n    Preconditions.checkState(false); // like assert false, state pruned to bottom\n}\n")),(0,l.kt)("h2",{id:"expensive_autoreleasepool_size"},"EXPENSIVE_AUTORELEASEPOOL_SIZE"),(0,l.kt)("p",null,'Reported as "Expensive Autoreleasepool Size" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"[","EXPERIMENTAL","]"," This warning indicates that non-constant and non-top ObjC autoreleasepool's size in\nthe procedure.  By default, this issue type is disabled."),(0,l.kt)("h2",{id:"expensive_execution_time"},"EXPENSIVE_EXECUTION_TIME"),(0,l.kt)("p",null,'Reported as "Expensive Execution Time" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"[","EXPERIMENTAL","]"," This warning indicates that the procedure has non-constant and non-top execution cost. By default, this issue type is disabled. To enable it, set ",(0,l.kt)("inlineCode",{parentName:"p"},"enabled=true")," in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/infer/blob/main/infer/src/base/costKind.ml#L55"},"costKind.ml"),"."),(0,l.kt)("p",null,"For instance, a simple example where we report this issue is a function with linear cost:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int sum_linear(ArrayList<Integer> list){\n int sum = 0;\n for (Integer el: list){\n   sum += el;\n }\n return sum;\n}\n")),(0,l.kt)("h2",{id:"expensive_loop_invariant_call"},"EXPENSIVE_LOOP_INVARIANT_CALL"),(0,l.kt)("p",null,'Reported as "Expensive Loop Invariant Call" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-loop-hoisting"},"loop-hoisting"),"."),(0,l.kt)("p",null,"We report this issue type when a function is ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/all-issue-types#invariant_call"},"loop-invariant")," and also expensive (i.e. at least has linear complexity as determined by the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost")," analysis)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int incr(int x) {\n  return x + 1;\n}\n\n// incr will not be hoisted since it is cheap(constant time)\nvoid foo_linear(int size) {\n  int x = 10;\n  for (int i = 0; i < size; i++) {\n    incr(x); // constant call, don't hoist\n  }\n}\n\n// call to foo_linear will be hoisted since it is expensive(linear in size).\nvoid symbolic_expensive_hoist(int size) {\n  for (int i = 0; i < size; i++) {\n    foo_linear(size); // hoist\n  }\n}\n")),(0,l.kt)("h2",{id:"exposed_insecure_intent_handling"},"EXPOSED_INSECURE_INTENT_HANDLING"),(0,l.kt)("p",null,'Reported as "Exposed Insecure Intent Handling" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Undocumented."),(0,l.kt)("h2",{id:"guardedby_violation"},"GUARDEDBY_VIOLATION"),(0,l.kt)("p",null,'Reported as "GuardedBy Violation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-racerd"},"racerd"),"."),(0,l.kt)("p",null,"A field annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@GuardedBy")," is being accessed by a call-chain that starts at a non-private method without synchronization."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'class C {\n  @GuardedBy("this")\n  String f;\n\n  void foo(String s) {\n    f = s; // unprotected access here\n  }\n}\n')),(0,l.kt)("p",null,"Action: Protect the offending access by acquiring the lock indicated by the ",(0,l.kt)("inlineCode",{parentName:"p"},"@GuardedBy(...)"),"."),(0,l.kt)("h2",{id:"impure_function"},"IMPURE_FUNCTION"),(0,l.kt)("p",null,'Reported as "Impure Function" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-impurity"},"impurity"),"."),(0,l.kt)("p",null,"This issue type indicates impure functions. For instance, below functions would be marked as impure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void makeAllZero_impure(ArrayList<Foo> list) {\n  Iterator<Foo> listIterator = list.iterator();\n  while (listIterator.hasNext()) {\n    Foo foo = listIterator.next();\n    foo.x = 0;\n  }\n}\n")),(0,l.kt)("h2",{id:"inefficient_keyset_iterator"},"INEFFICIENT_KEYSET_ITERATOR"),(0,l.kt)("p",null,'Reported as "Inefficient Keyset Iterator" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-inefficient-keyset-iterator"},"inefficient-keyset-iterator"),"."),(0,l.kt)("p",null,"This issue is raised when"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"iterating over a HashMap with ",(0,l.kt)("inlineCode",{parentName:"li"},"ketSet()")," iterator"),(0,l.kt)("li",{parentName:"ul"},"looking up the key each time")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void inefficient_loop_bad(HashMap<String, Integer> testMap) {\n for (String key : testMap.keySet()) {\n   Integer value = testMap.get(key); // extra look-up cost\n   foo(key, value);\n }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),":"),(0,l.kt)("p",null,"Instead, it is more efficient to iterate over the loop with ",(0,l.kt)("inlineCode",{parentName:"p"},"entrySet")," which returns key-vaue pairs and gets rid of the hashMap lookup."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void efficient_loop_ok(HashMap<String, Integer> testMap) {\n  for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    String key = entry.getKey();\n    Integer value = entry.getValue();\n    foo(key, value);\n  }\n}\n")),(0,l.kt)("h2",{id:"inferbo_alloc_is_big"},"INFERBO_ALLOC_IS_BIG"),(0,l.kt)("p",null,'Reported as "Inferbo Alloc Is Big" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"malloc")," is passed a large constant value (>=10^6). For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int n = 1000000; malloc(n);")," generates ",(0,l.kt)("inlineCode",{parentName:"p"},"INFERBO_ALLOC_IS_BIG")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"malloc(n)"),"."),(0,l.kt)("p",null,"Action: Fix the size argument or make sure it is really needed."),(0,l.kt)("h2",{id:"inferbo_alloc_is_negative"},"INFERBO_ALLOC_IS_NEGATIVE"),(0,l.kt)("p",null,'Reported as "Inferbo Alloc Is Negative" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"malloc")," is called with a negative size. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int n = 3 - 5; malloc(n);")," generates ",(0,l.kt)("inlineCode",{parentName:"p"},"INFERBO_ALLOC_IS_NEGATIVE")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"malloc(n)"),"."),(0,l.kt)("p",null,"Action: Fix the size argument."),(0,l.kt)("h2",{id:"inferbo_alloc_is_zero"},"INFERBO_ALLOC_IS_ZERO"),(0,l.kt)("p",null,'Reported as "Inferbo Alloc Is Zero" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"malloc")," is called with a zero size. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int n = 3 - 3; malloc(n);")," generates ",(0,l.kt)("inlineCode",{parentName:"p"},"INFERBO_ALLOC_IS_ZERO")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"malloc(n)"),"."),(0,l.kt)("p",null,"Action: Fix the size argument."),(0,l.kt)("h2",{id:"inferbo_alloc_may_be_big"},"INFERBO_ALLOC_MAY_BE_BIG"),(0,l.kt)("p",null,'Reported as "Inferbo Alloc May Be Big" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"malloc")," ",(0,l.kt)("em",{parentName:"p"},"may")," be called with a large value. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int n = b ? 3 : 1000000; malloc(n);")," generates ",(0,l.kt)("inlineCode",{parentName:"p"},"INFERBO_ALLOC_MAY_BE_BIG")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"malloc(n)"),"."),(0,l.kt)("p",null,"Action: Fix the size argument or add a bound checking, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"if (n < A_SMALL_NUMBER) { malloc(n); }"),"."),(0,l.kt)("h2",{id:"inferbo_alloc_may_be_negative"},"INFERBO_ALLOC_MAY_BE_NEGATIVE"),(0,l.kt)("p",null,'Reported as "Inferbo Alloc May Be Negative" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"malloc")," ",(0,l.kt)("em",{parentName:"p"},"may")," be called with a negative value. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int n = b ? 3 : -5; malloc(n);")," generates ",(0,l.kt)("inlineCode",{parentName:"p"},"INFERBO_ALLOC_MAY_BE_NEGATIVE")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"malloc(n)"),"."),(0,l.kt)("p",null,"Action: Fix the size argument or add a bound checking, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"if (n > 0) { malloc(n); }"),"."),(0,l.kt)("h2",{id:"infinite_autoreleasepool_size"},"INFINITE_AUTORELEASEPOOL_SIZE"),(0,l.kt)("p",null,'Reported as "Infinite Autoreleasepool Size" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"[","EXPERIMENTAL","]"," This warning indicates that Infer was not able to determine a static upper bound on\nthe Objective-C's autoreleasepool size in the procedure. This issuee type is similar to ",(0,l.kt)("a",{parentName:"p",href:"#infinite_execution_time"},"INFINITE_EXECUTION_COST"),", with the difference that rather than the execution cost, we account for the size of the Objective-C autoreleasepool size."),(0,l.kt)("p",null,"By default, this issue type is disabled."),(0,l.kt)("h2",{id:"infinite_execution_time"},"INFINITE_EXECUTION_TIME"),(0,l.kt)("p",null,'Reported as "Infinite Execution Time" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-cost"},"cost"),"."),(0,l.kt)("p",null,"This warning indicates that Infer was not able to determine a static\nupper bound on the execution cost of the procedure. By default, this\nissue type is disabled."),(0,l.kt)("h3",{id:"example-1-t-due-to-expressivity"},"Example 1: T due to expressivity"),(0,l.kt)("p",null,"For instance, Inferbo's interval analysis is limited to affine\nexpressions. Hence, we can't statically estimate an upper bound on the\nbelow example and obtain T(unknown) cost:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// Expected: square root(x), got T\nvoid square_root_FP(int x) {\n int i = 0;\n while (i * i < x) {\n   i++;\n }\n}\n")),(0,l.kt)("h3",{id:"example-2-t-due-to-unmodeled-calls"},"Example 2: T due to unmodeled calls"),(0,l.kt)("p",null,"Another common case where we get T cost is when Infer cannot statically determine the range of values for loop bounds. For instance, "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void loop_over_charArray_FP(StringBuilder builder, String input) {\n  for (Character c : input.toCharArray()) {}\n}\n")),(0,l.kt)("p",null,"Here, Infer does not have any InferBo models for the range of values returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"String.toCharArray"),", hence it cannot determine that we will be iterating over a char array in the size of ",(0,l.kt)("inlineCode",{parentName:"p"},"input")," string.  "),(0,l.kt)("p",null,"To teach InferBo about such library calls, they should be semantically modeled in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/infer/blob/main/infer/src/bufferoverrun/bufferOverrunModels.ml"},"InferBo"),"."),(0,l.kt)("h3",{id:"example-3-t-due-to-calling-another-t-costed-function"},"Example 3: T due to calling another T-costed function"),(0,l.kt)("p",null,"Since the analysis is inter-procedural, another example we can have T cost is if at least one of the callees has T cost."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// Expected: constant, got T\nvoid call_top_cost_FP() {\n square_root_FP(1); // square_root_FP has Top cost\n}\n")),(0,l.kt)("h2",{id:"insecure_intent_handling"},"INSECURE_INTENT_HANDLING"),(0,l.kt)("p",null,'Reported as "Insecure Intent Handling" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Undocumented."),(0,l.kt)("h2",{id:"integer_overflow_l1"},"INTEGER_OVERFLOW_L1"),(0,l.kt)("p",null,'Reported as "Integer Overflow L1" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"This is reported when integer overflow occurred by integer operations such as addition, subtraction,\nand multiplication. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"int n = INT_MAX; int m = n + 3;")," generates a INTEGER_OVERFLOW_L1\non ",(0,l.kt)("inlineCode",{parentName:"p"},"n + 3"),"."),(0,l.kt)("p",null,'Integer overflows reports fall into several "buckets" corresponding to the expected precision of the\nreport. The higher the number, the more likely it is to be a false positive.'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L1"),": The most faithful report, when it ",(0,l.kt)("em",{parentName:"p"},"must")," be unsafe.  For example,\n",(0,l.kt)("inlineCode",{parentName:"p"},"[2147483647,2147483647] + [1,1]")," in 32-bit signed integer type.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L2"),": Less faithful report than ",(0,l.kt)("inlineCode",{parentName:"p"},"L1"),", when it ",(0,l.kt)("em",{parentName:"p"},"may")," be unsafe.  For example,\n",(0,l.kt)("inlineCode",{parentName:"p"},"[2147483647,2147483647] + [0,1]")," in 32-bit signed integer type.  Note that the integer of RHS\ncan be 0, which is safe.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"L5"),": The reports that are not included in the above cases.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"U5"),": A binary integer operation is unsafe by unknown values, which are usually from unknown\nfunction calls."))),(0,l.kt)("h2",{id:"integer_overflow_l2"},"INTEGER_OVERFLOW_L2"),(0,l.kt)("p",null,'Reported as "Integer Overflow L2" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#integer_overflow_l1"},"INTEGER_OVERFLOW_L1")),(0,l.kt)("h2",{id:"integer_overflow_l5"},"INTEGER_OVERFLOW_L5"),(0,l.kt)("p",null,'Reported as "Integer Overflow L5" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#integer_overflow_l1"},"INTEGER_OVERFLOW_L1")),(0,l.kt)("h2",{id:"integer_overflow_u5"},"INTEGER_OVERFLOW_U5"),(0,l.kt)("p",null,'Reported as "Integer Overflow U5" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-bufferoverrun"},"bufferoverrun"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#integer_overflow_l1"},"INTEGER_OVERFLOW_L1")),(0,l.kt)("h2",{id:"interface_not_thread_safe"},"INTERFACE_NOT_THREAD_SAFE"),(0,l.kt)("p",null,'Reported as "Interface Not Thread Safe" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-racerd"},"racerd"),"."),(0,l.kt)("p",null,"This error indicates that you have invoked an interface method not annotated\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadSafe")," from a thread-safe context (e.g., code that uses locks or is\nmarked ",(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadSafe"),"). The fix is to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadSafe")," annotation to the\ninterface or to the interface method. For background on why these annotations\nare needed, see the detailed explanation\n",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-racerd#interface-not-thread-safe"},"here"),"."),(0,l.kt)("h2",{id:"invalid_sil"},"INVALID_SIL"),(0,l.kt)("p",null,'Reported as "Invalid Sil" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-sil-validation"},"sil-validation"),"."),(0,l.kt)("p",null,"The SIL instruction does not conform to the expected subset of instructions\nexpected for the front-end of the language for the analyzed code."),(0,l.kt)("h2",{id:"invariant_call"},"INVARIANT_CALL"),(0,l.kt)("p",null,'Reported as "Invariant Call" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-loop-hoisting"},"loop-hoisting"),"."),(0,l.kt)("p",null,"We report this issue type when a function call is loop-invariant and hoistable, i.e."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the function has no side side effects (pure)"),(0,l.kt)("li",{parentName:"ul"},"has invariant arguments and result (i.e. have the same value in all loop iterations)"),(0,l.kt)("li",{parentName:"ul"},"it is guaranteed to execute, i.e. it dominates all loop sources")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int foo(int x, int y) {\n return x + y;\n}\n\n\nvoid invariant_hoist(int size) {\n    int x = 10;\n    int y = 5;\n    for (int i = 0; i < size; i++) {\n      foo(x, y); // hoistable\n    }\n  }\n")),(0,l.kt)("h2",{id:"ipc_on_ui_thread"},"IPC_ON_UI_THREAD"),(0,l.kt)("p",null,'Reported as "Ipc On Ui Thread" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"A blocking ",(0,l.kt)("inlineCode",{parentName:"p"},"Binder")," IPC call occurs on the UI thread."),(0,l.kt)("h2",{id:"javascript_injection"},"JAVASCRIPT_INJECTION"),(0,l.kt)("p",null,'Reported as "Javascript Injection" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted data flows into JavaScript."),(0,l.kt)("h2",{id:"lab_resource_leak"},"LAB_RESOURCE_LEAK"),(0,l.kt)("p",null,'Reported as "Lab Resource Leak" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-resource-leak-lab"},"resource-leak-lab"),"."),(0,l.kt)("p",null,"Toy issue."),(0,l.kt)("h2",{id:"lockless_violation"},"LOCKLESS_VIOLATION"),(0,l.kt)("p",null,'Reported as "Lockless Violation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"A method implements an interface signature annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Lockless")," but which transitively acquires a lock."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Interface I {\n    @Lockless\n    public void no_lock();\n}\n\nclass C implements I {\n  private synchronized do_lock() {}\n\n  public void no_lock() { // this method should not acquire any locks\n    do_lock();\n  }\n}\n")),(0,l.kt)("h2",{id:"lock_consistency_violation"},"LOCK_CONSISTENCY_VIOLATION"),(0,l.kt)("p",null,'Reported as "Lock Consistency Violation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-racerd"},"racerd"),"."),(0,l.kt)("p",null,"This is an error reported on C++ and Objective C classes whenever:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Some class method directly uses locking primitives (not transitively)."),(0,l.kt)("li",{parentName:"ul"},"It has a public method which writes to some member ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," while holding a lock."),(0,l.kt)("li",{parentName:"ul"},"It has a public method which reads ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," without holding a lock.")),(0,l.kt)("p",null,"The above may happen through a chain of calls. Above, ",(0,l.kt)("inlineCode",{parentName:"p"},"x")," may also be a\ncontainer (an array, a vector, etc)."),(0,l.kt)("h3",{id:"fixing-lock-consistency-violation-reports"},"Fixing Lock Consistency Violation reports"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Avoid the offending access (most often the read). Of course, this may not be\npossible."),(0,l.kt)("li",{parentName:"ul"},"Use synchronization to protect the read, by using the same lock protecting the\ncorresponding write."),(0,l.kt)("li",{parentName:"ul"},"Make the method doing the read access private. This should silence the\nwarning, since Infer looks for a pair of non-private methods. Objective-C:\nInfer considers a method as private if it's not exported in the header-file\ninterface.")),(0,l.kt)("h2",{id:"logging_private_data"},"LOGGING_PRIVATE_DATA"),(0,l.kt)("p",null,'Reported as "Logging Private Data" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Undocumented."),(0,l.kt)("h2",{id:"memory_leak_c"},"MEMORY_LEAK_C"),(0,l.kt)("p",null,'Reported as "Memory Leak" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("h3",{id:"memory-leak-in-c"},"Memory leak in C"),(0,l.kt)("p",null,"This error type is only reported in C and Objective-C code. In Java we do not\nreport memory leaks because it is a garbage collected language."),(0,l.kt)("p",null,"In C, Infer reports memory leaks when objects are created with ",(0,l.kt)("inlineCode",{parentName:"p"},"malloc")," and not\nfreed. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"-(void) memory_leak_bug {\n    struct Person *p = malloc(sizeof(struct Person));\n}\n")),(0,l.kt)("h3",{id:"memory-leak-in-objective-c"},"Memory leak in Objective-C"),(0,l.kt)("p",null,"Additionally, in Objective-C, Infer reports memory leaks that happen when\nobjects from Core Foundation or Core Graphics don't get released."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"-(void) memory_leak_bug_cf {\n    CGPathRef shadowPath = CGPathCreateWithRect(self.inputView.bounds, NULL); //object created and not released.\n}\n")),(0,l.kt)("h2",{id:"memory_leak_cpp"},"MEMORY_LEAK_CPP"),(0,l.kt)("p",null,'Reported as "Memory Leak" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#memory_leak_c"},"MEMORY_LEAK_C")),(0,l.kt)("h2",{id:"missing_required_prop"},"MISSING_REQUIRED_PROP"),(0,l.kt)("p",null,'Reported as "Missing Required Prop" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-litho-required-props"},"litho-required-props"),"."),(0,l.kt)("p",null,"This issues is reported when a required ",(0,l.kt)("inlineCode",{parentName:"p"},"@Prop")," is missing."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Assume that the following Litho Component specification is defined as follows where ",(0,l.kt)("inlineCode",{parentName:"p"},"prop1")," is optional and ",(0,l.kt)("inlineCode",{parentName:"p"},"prop2")," is required."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class MyComponentSpec {\n\n  static void onCreate(\n      ComponentContext c,\n      @Prop(optional = true) String prop1, @Prop int prop2) {\n    ...\n  }\n  ...\n}\n")),(0,l.kt)("p",null,"When we build the corresponding component, we should have all the required props. If we are missing optional props (e..g ",(0,l.kt)("inlineCode",{parentName:"p"},"prop1")," below), it is ok."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"MyComponent.create(c)\n    .prop2(8)\n    .build();\n")),(0,l.kt)("p",null,"However, if we are missing a required prop, Infer gives an error below for the missing ",(0,l.kt)("inlineCode",{parentName:"p"},"prop2"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'MyComponent.create(c)\n    .prop1("My prop 1")\n    .build();\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Action ")),(0,l.kt)("p",null,"There are two ways to fix this issue."),(0,l.kt)("p",null,"First, we could add the missing ",(0,l.kt)("inlineCode",{parentName:"p"},"prop2"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'MyComponent.create(c)\n    .prop1("My prop 1")\n    .prop2(x) // where x is some integer\n    .build();\n')),(0,l.kt)("p",null,"or alternatively, if the ",(0,l.kt)("inlineCode",{parentName:"p"},"prop2")," is not really required, we could change the component spec to reflect that:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class MyComponentSpec {\n\n  static void onCreate(\n      ComponentContext c,\n      @Prop(optional = true) String prop1, @Prop(optional = true) int prop2) {\n    ...\n  }\n  ...\n}\n")),(0,l.kt)("h2",{id:"mixed_self_weakself"},"MIXED_SELF_WEAKSELF"),(0,l.kt)("p",null,'Reported as "Mixed Self WeakSelf" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-self-in-block"},"self-in-block"),"."),(0,l.kt)("p",null,"This check reports an issue when an Objective-C block captures both ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),", a weak pointer to ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),".\nPossibly the developer meant to capture only ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," to avoid a retain cycle, but made a typo and used ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),"\ninstead of ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf"),". In this case, this could cause a retain cycle."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n    if (strongSelf) {\n      [strongSelf foo];\n      int x = self->x; // typo here\n    }\n    return 0;\n  };\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),": Fixing the typo is generally the right course of action."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Limitations:")," To keep this check simple and intra-procedural, we rely on names to find ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),':\nwe assume that any captured weak pointer whose name contains "self" is a weak reference to ',(0,l.kt)("inlineCode",{parentName:"p"},"self"),"."),(0,l.kt)("h2",{id:"modifies_immutable"},"MODIFIES_IMMUTABLE"),(0,l.kt)("p",null,'Reported as "Modifies Immutable" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-impurity"},"impurity"),"."),(0,l.kt)("p",null,"This issue type indicates modifications to fields marked as @Immutable. For instance, below function ",(0,l.kt)("inlineCode",{parentName:"p"},"mutateArray")," would be marked as modifying immutable field ",(0,l.kt)("inlineCode",{parentName:"p"},"testArray"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  @Immutable int[] testArray = new int[]{0, 1, 2, 4};\n  \n  int[] getTestArray() {\n    return testArray;\n  }                \n          \n  void mutateArray() {\n    int[] array = getTestArray();\n    array[2] = 7;\n  }\n")),(0,l.kt)("h2",{id:"multiple_weakself"},"MULTIPLE_WEAKSELF"),(0,l.kt)("p",null,'Reported as "Multiple WeakSelf Use" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-self-in-block"},"self-in-block"),"."),(0,l.kt)("p",null,"This check reports when an Objective-C block uses ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," (a weak pointer to ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),") more than once.\nThis could lead to unexpected behaviour. Even if ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," is not nil in the first use, it could be nil\nin the following uses since the object that ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," points to could be freed anytime."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n      [weakSelf foo];\n      int x = weakSelf->x;\n  };\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action:"),"\nOne should assign ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," to a strong pointer first, and then\nuse it in the block."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n    if (strongSelf) {\n      [strongSelf foo];\n      int x = strongSelf->x;\n    }\n    ...\n  };\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Limitations:")," To keep this check simple and intra-procedural, we rely on names to find ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),':\nwe assume that any captured weak pointer whose name contains "self" is a weak reference to ',(0,l.kt)("inlineCode",{parentName:"p"},"self"),".\nIn contrast, ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," is a local variable to the block, so the check supports any name given to\na local strong pointer that has been assigned ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),"."),(0,l.kt)("h2",{id:"nil_block_call"},"NIL_BLOCK_CALL"),(0,l.kt)("p",null,'Reported as "Nil Block Call" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This check reports when one tries to call an Objective-C block that is ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),".\nThis causes a crash."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"-(void) foo:(void (^)())callback {\n    callback();\n}\n\n-(void) bar {\n    [self foo:nil]; //crash\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),":"),(0,l.kt)("p",null,"Adding a check for ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," before calling the block, or making sure never to call the method ",(0,l.kt)("inlineCode",{parentName:"p"},"foo:")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,l.kt)("h2",{id:"nil_block_call_latent"},"NIL_BLOCK_CALL_LATENT"),(0,l.kt)("p",null,'Reported as "Nil Block Call Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#nil_block_call"},"NIL_BLOCK_CALL"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"nil_insertion_into_collection"},"NIL_INSERTION_INTO_COLLECTION"),(0,l.kt)("p",null,'Reported as "Nil Insertion Into Collection" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This checks reports when ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," is passed to collections in Objective-C such as arrays and dictionaries. This causes a crash."),(0,l.kt)("h3",{id:"arrays"},"Arrays"),(0,l.kt)("p",null,"Adding objects to an array, inserting objects at a given index, or replacing objects at a given index, can all\nlead to a crash when the object is ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  [mArray addObject:nil];  //crash\n\n  [mArray insertObject:nil atIndex:0];   //crash\n\n  [mArray replaceObjectAtIndex:0 withObject:nil]; //crash\n")),(0,l.kt)("h3",{id:"dictionaries"},"Dictionaries"),(0,l.kt)("p",null,"Adding a ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," value in a dictionary causes a crash. If the concept of ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," is required, one can add\n",(0,l.kt)("inlineCode",{parentName:"p"},"[NSNull null]")," instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},'  id value = nil;\n  [mDict setObject:value forKey:@"somestring"]; //crash\n\n  [mDict setObject:[NSNull null] forKey:@"somestring"]; //ok\n')),(0,l.kt)("p",null,"Retrieving or removing an object from a dictionary with a ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," key also causes a crash:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},'    id key = nil;\n    mDict[key] = @"somestring"; //crash\n\n   [mDict removeObjectForKey:nil]; //crash\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),":"),(0,l.kt)("p",null,"In all the cases above, when passing ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," causes a crash, the solutions are either making sure\nthat the object passed will never be ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),", or adding a check for ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," before calling those methods."),(0,l.kt)("h2",{id:"nil_insertion_into_collection_latent"},"NIL_INSERTION_INTO_COLLECTION_LATENT"),(0,l.kt)("p",null,'Reported as "Nil Insertion Into Collection" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#nil_insertion_into_collection"},"NIL_INSERTION_INTO_COLLECTION"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"nil_messaging_to_non_pod"},"NIL_MESSAGING_TO_NON_POD"),(0,l.kt)("p",null,'Reported as "Nil Messaging To Non Pod" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"In Objective-C, calling a method on ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," (or in Objective-C terms, sending a message to ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),") does not crash,\nit simply returns a falsy value (nil/0/false). However, sending a message that returns\na non-POD C++ type (POD being ",(0,l.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/named_req/PODType"},'"Plain Old Data"'),", essentially\nanything that cannot be compiled as a C-style struct) to ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," causes undefined behaviour."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"std::shared_ptr<int> callMethodReturnsnonPOD() {\n  SomeObject* obj = getObjectOrNil();\n  std::shared_ptr<int> d = [obj returnsnonPOD]; // UB\n  return d;\n}\n")),(0,l.kt)("p",null,"To fix the above issue, we need to check if ",(0,l.kt)("inlineCode",{parentName:"p"},"obj")," is\nnot ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," before calling the ",(0,l.kt)("inlineCode",{parentName:"p"},"returnsnonPOD")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"std::shared_ptr<int> callMethodReturnsnonPOD(bool b) {\n  SomeObject* obj = getObjectOrNil(b);\n  if (obj == nil) { return std::make_shared<int>(0); }\n  std::shared_ptr<int> d = [obj returnsnonPOD];\n  return d;\n}\n")),(0,l.kt)("h2",{id:"nil_messaging_to_non_pod_latent"},"NIL_MESSAGING_TO_NON_POD_LATENT"),(0,l.kt)("p",null,'Reported as "Nil Messaging To Non Pod Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#nil_messaging_to_non_pod"},"NIL_MESSAGING_TO_NON_POD"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"no_matching_branch_in_try"},"NO_MATCHING_BRANCH_IN_TRY"),(0,l.kt)("p",null,'Reported as "No Matching Branch In Try" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"No matching branch is found when evaluating the ",(0,l.kt)("inlineCode",{parentName:"p"},"of")," section of a ",(0,l.kt)("inlineCode",{parentName:"p"},"try")," expression. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"{try_clause,V}")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, if we call ",(0,l.kt)("inlineCode",{parentName:"p"},"tail([])")," and the full definition of ",(0,l.kt)("inlineCode",{parentName:"p"},"tail")," is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"tail(X) ->\n    try X of\n        [_|T] -> {ok,T}\n    catch\n        _ -> error\n    end.\n")),(0,l.kt)("h2",{id:"no_matching_branch_in_try_latent"},"NO_MATCHING_BRANCH_IN_TRY_LATENT"),(0,l.kt)("p",null,'Reported as "No Matching Branch In Try Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#no_matching_branch_in_try"},"NO_MATCHING_BRANCH_IN_TRY"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"no_matching_case_clause"},"NO_MATCHING_CASE_CLAUSE"),(0,l.kt)("p",null,'Reported as "No Matching Case Clause" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"No matching case clause in Erlang: Reports an error when none of the clauses of a ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," match the expression. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"{case_clause,V}")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, if we call ",(0,l.kt)("inlineCode",{parentName:"p"},"tail([])")," and the full definition of ",(0,l.kt)("inlineCode",{parentName:"p"},"tail")," is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"tail(X) ->\n    case X of\n        [_|T] -> T\n    end.\n")),(0,l.kt)("p",null,"This error is reported if either the pattern(s) or the guard(s) prevent matching any of the clauses."),(0,l.kt)("h2",{id:"no_matching_case_clause_latent"},"NO_MATCHING_CASE_CLAUSE_LATENT"),(0,l.kt)("p",null,'Reported as "No Matching Case Clause Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#no_matching_case_clause"},"NO_MATCHING_CASE_CLAUSE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"no_matching_function_clause"},"NO_MATCHING_FUNCTION_CLAUSE"),(0,l.kt)("p",null,'Reported as "No Matching Function Clause" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"No matching function clause in Erlang: Reports an error when none of the clauses of a function match the arguments of a call. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"function_clause")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, if we call ",(0,l.kt)("inlineCode",{parentName:"p"},"tail([])")," and the full definition of ",(0,l.kt)("inlineCode",{parentName:"p"},"tail")," is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"tail([_|Xs]) -> Xs.\n")),(0,l.kt)("p",null,"This error is reported if either the pattern(s) or the guard(s) prevent matching any of the clauses."),(0,l.kt)("h2",{id:"no_matching_function_clause_latent"},"NO_MATCHING_FUNCTION_CLAUSE_LATENT"),(0,l.kt)("p",null,'Reported as "No Matching Function Clause Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#no_matching_function_clause"},"NO_MATCHING_FUNCTION_CLAUSE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"no_match_of_rhs"},"NO_MATCH_OF_RHS"),(0,l.kt)("p",null,'Reported as "No Match Of Rhs" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"No match of right hand side value in Erlang: Reports an error when the right hand side value of a ",(0,l.kt)("inlineCode",{parentName:"p"},"match")," expression does not match the pattern on the left hand side. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"{badmatch,V}")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"[H|T] = []")," gives the error because the left hand side pattern requires at least one element in the list on the right hand side."),(0,l.kt)("h2",{id:"no_match_of_rhs_latent"},"NO_MATCH_OF_RHS_LATENT"),(0,l.kt)("p",null,'Reported as "No Match Of Rhs Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#no_match_of_rhs"},"NO_MATCH_OF_RHS"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"no_true_branch_in_if"},"NO_TRUE_BRANCH_IN_IF"),(0,l.kt)("p",null,'Reported as "No True Branch In If" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"No true branch when evaluating an if expression in Erlang: Reports an error when none of the branches of an ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," expression evaluate to true. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"if_clause")," error in the Erlang runtime."),(0,l.kt)("p",null,"For example, if we call ",(0,l.kt)("inlineCode",{parentName:"p"},"sign(0)")," and the full definition of ",(0,l.kt)("inlineCode",{parentName:"p"},"sign")," is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erlang"},"sign(X) ->\n    if\n        X > 0 -> positive;\n        X < 0 -> negative\n    end.\n")),(0,l.kt)("h2",{id:"no_true_branch_in_if_latent"},"NO_TRUE_BRANCH_IN_IF_LATENT"),(0,l.kt)("p",null,'Reported as "No True Branch In If Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#no_true_branch_in_if"},"NO_TRUE_BRANCH_IN_IF"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"nullptr_dereference"},"NULLPTR_DEREFERENCE"),(0,l.kt)("p",null,'Reported as "Null Dereference" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Infer reports null dereference bugs in Java, C, C++, and Objective-C\nwhen it is possible that the null pointer is dereferenced, leading to\na crash."),(0,l.kt)("h3",{id:"null-dereference-in-java"},"Null dereference in Java"),(0,l.kt)("p",null,"Many of Infer's reports of potential Null Pointer Exceptions (NPE) come from code of the form"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  p = foo(); // foo() might return null\n  stuff();\n  p.goo();   // dereferencing p, potential NPE\n")),(0,l.kt)("p",null,"If you see code of this form, then you have several options."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"If you are unsure whether or not ",(0,l.kt)("inlineCode",{parentName:"strong"},"foo()")," will return null"),", you should\nideally either"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Change the code to ensure that ",(0,l.kt)("inlineCode",{parentName:"p"},"foo()")," can not return null, or")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Add a check that ",(0,l.kt)("inlineCode",{parentName:"p"},"p")," is not ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," before dereferencing ",(0,l.kt)("inlineCode",{parentName:"p"},"p"),"."))),(0,l.kt)("p",null,"Sometimes, in case (2) it is not obvious what you should do when ",(0,l.kt)("inlineCode",{parentName:"p"},"p"),"\nis ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),". One possibility is to throw an exception, failing early but\nexplicitly. This can be done using ",(0,l.kt)("inlineCode",{parentName:"p"},"checkNotNull")," as in the following\ncode:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// code idiom for failing early\nimport static com.google.common.base.Preconditions.checkNotNull;\n\n  //... intervening code\n\n  p = checkNotNull(foo()); // foo() might return null\n  stuff();\n  p.goo(); // p cannot be null here\n")),(0,l.kt)("p",null,"The call ",(0,l.kt)("inlineCode",{parentName:"p"},"checkNotNull(foo())")," will never return ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),": if ",(0,l.kt)("inlineCode",{parentName:"p"},"foo()"),"\nreturns ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," then it fails early by throwing a Null Pointer\nException."),(0,l.kt)("p",null,"Facebook NOTE: ",(0,l.kt)("strong",{parentName:"p"},"If you are absolutely sure that foo() will not be\nnull"),", then if you land your diff this case will no longer be\nreported after your diff makes it to trunk."),(0,l.kt)("h3",{id:"null-dereference-in-c"},"Null dereference in C"),(0,l.kt)("p",null,"Here is an example of an inter-procedural null dereference bug in C:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct Person {\n  int age;\n  int height;\n  int weight;\n};\nint get_age(struct Person *who) {\n  return who->age;\n}\nint null_pointer_interproc() {\n  struct Person *joe = 0;\n  return get_age(joe);\n}\n")),(0,l.kt)("h3",{id:"null-dereference-in-objective-c"},"Null dereference in Objective-C"),(0,l.kt)("p",null,"In Objective-C, null dereferences are less common than in Java, but they still\nhappen and their cause can be hidden. In general, passing a message to nil does\nnot cause a crash and returns ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),", but dereferencing a pointer directly does\ncause a crash."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"(int) foo:(C*) param {  // passing nil\n  D* d = [param bar];   // nil message passing\n  return d->fld;        // crash\n}\n(void) callFoo {\n  C* c = [self bar];    // returns nil\n  [foo:c];              // crash reported here\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),":\nAdding a ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," check either for ",(0,l.kt)("inlineCode",{parentName:"p"},"param")," above or for ",(0,l.kt)("inlineCode",{parentName:"p"},"d"),", or making sure that ",(0,l.kt)("inlineCode",{parentName:"p"},"foo:")," will never\nbe called with ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,l.kt)("p",null,"Calling a ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," block will also cause a crash.\nWe have a dedicated issue type for this case: ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/all-issue-types#nil_block_call"},"Nil Block Call"),"."),(0,l.kt)("p",null,"Moreover, inserting ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," into a collection will cause a crash as well. We\nalso have a dedicated issue type for this case:\n",(0,l.kt)("a",{parentName:"p",href:"/docs/next/all-issue-types#nil_insertion_into_collection"},"Nil Insertion Into Collection"),"."),(0,l.kt)("h2",{id:"nullptr_dereference_latent"},"NULLPTR_DEREFERENCE_LATENT"),(0,l.kt)("p",null,'Reported as "Null Dereference" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#nullptr_dereference"},"NULLPTR_DEREFERENCE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"null_argument"},"NULL_ARGUMENT"),(0,l.kt)("p",null,'Reported as "Null Argument" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},"This issue type indicates `nil` being passed as argument where a non-nil value expected.\n\n#import <Foundation/Foundation.h>\n\n// Test (non-nil) returned values of NSString methods against `nil`\nNSString* stringNotNil(NSString* str) {\n  if (!str) {\n        // ERROR: NSString:stringWithString: expects a non-nil value\n    return [NSString stringWithString:nil];\n  }\n  return str;\n}\n")),(0,l.kt)("h2",{id:"null_argument_latent"},"NULL_ARGUMENT_LATENT"),(0,l.kt)("p",null,'Reported as "Null Argument Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#null_argument"},"NULL_ARGUMENT"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"null_dereference"},"NULL_DEREFERENCE"),(0,l.kt)("p",null,'Reported as "Null Dereference" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#nullptr_dereference"},"NULLPTR_DEREFERENCE"),"."),(0,l.kt)("h2",{id:"optional_empty_access"},"OPTIONAL_EMPTY_ACCESS"),(0,l.kt)("p",null,'Reported as "Optional Empty Access" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Optional Empty Access warnings are reported when we try to retrieve the value of a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/folly/blob/master/folly/Optional.h"},(0,l.kt)("inlineCode",{parentName:"a"},"folly::Optional"))," when it is empty (i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"folly::none"),")."),(0,l.kt)("p",null,"In the following example we get a warning as ",(0,l.kt)("inlineCode",{parentName:"p"},"int_opt")," might be ",(0,l.kt)("inlineCode",{parentName:"p"},"folly::none")," and its value is being accessed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool somef(int v);\n\nfolly::Optional<int> mightReturnNone(int v) {\n   if (somef(v)) {\n      return folly::Optional(v);\n   }\n\n   return folly::none;\n}\n\nint value_no_check() {\n  folly::Optional<int> int_opt = mightReturnNone (4);\n  return int_opt.value(); // Optional Empty Access warning\n}\n")),(0,l.kt)("p",null,"We do not get the warning anymore if we add a check whether ",(0,l.kt)("inlineCode",{parentName:"p"},"int_opt")," is not empty:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int value_check() {\n  folly::Optional<int> int_opt = mightReturnNone (4);\n  if (int_opt.has_value()) {\n     return int_opt.value(); // OK\n  }\n  return -1;\n}\n")),(0,l.kt)("p",null,"In some cases we know that we have a non-empty value and there is no need to have a check. Consider the following example where Infer does not warn:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool somef(int v) {return v > 3;};\n\nfolly::Optional<int> mightReturnNone(int v) {\n   if (somef(v)) {\n      return folly::Optional(v);\n   }\n\n   return folly::none;\n}\n\nint value_no_check() {\n  folly::Optional<int> int_opt = mightReturnNone (4); // cannot be folly::none\n  return int_opt.value(); // OK\n}\n")),(0,l.kt)("h2",{id:"optional_empty_access_latent"},"OPTIONAL_EMPTY_ACCESS_LATENT"),(0,l.kt)("p",null,'Reported as "Optional Empty Access Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#optional_empty_access"},"OPTIONAL_EMPTY_ACCESS"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"premature_nil_termination_argument"},"PREMATURE_NIL_TERMINATION_ARGUMENT"),(0,l.kt)("p",null,'Reported as "Premature Nil Termination Argument" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("p",null,"This error type is reported in C and Objective-C. In many variadic methods,\n",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," is used to signify the end of the list of input objects. This is similar\nto nil-termination of C strings. If one of the arguments that is not the last\nargument to the method is ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," as well, Infer reports an error because that may\nlead to unexpected behavior."),(0,l.kt)("p",null,"An example of such variadic methods is\n",(0,l.kt)("a",{parentName:"p",href:"https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/occ/clm/NSArray/arrayWithObjects"},"arrayWithObjects")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},'  NSArray *foo = [NSArray arrayWithObjects: @"aaa", str, @"bbb", nil];\n')),(0,l.kt)("p",null,"In this example, if ",(0,l.kt)("inlineCode",{parentName:"p"},"str")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," then an array ",(0,l.kt)("inlineCode",{parentName:"p"},'@[@"aaa"]')," of size 1 will be\ncreated, and not an array ",(0,l.kt)("inlineCode",{parentName:"p"},'@[@"aaa", str, @"bbb"]')," of size 3 as expected."),(0,l.kt)("h2",{id:"pulse_const_refable"},"PULSE_CONST_REFABLE"),(0,l.kt)("p",null,'Reported as "Const Refable Parameter" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This issue is reported when a function parameter is a) passed by value and b) is not modified inside the function. Instead, parameter can be passed by const reference, i.e. converted to a ",(0,l.kt)("inlineCode",{parentName:"p"},"const&")," so that no unnecessary copy is created at the callsite of the function."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\n\nint read_first(const std::vector<int>& vec) { return vec[0]; }\n\nvoid const_refable(std::vector<int> vec) {\n  int first = read_first(vec); // vec is never modified, so the parameter should have type const&\n}\n")),(0,l.kt)("h2",{id:"pulse_readonly_shared_ptr_param"},"PULSE_READONLY_SHARED_PTR_PARAM"),(0,l.kt)("p",null,'Reported as "Read-only Shared Parameter" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This issue is reported when a shared pointer parameter is a) passed by value and b) is used only for reading, rather than lifetime extension. At the callsite, this might cause a potentially expensive unnecessary copy of the shared pointer, especially when many number of threads are sharing it. To avoid this, consider 1) passing the raw pointer instead and 2) use ",(0,l.kt)("inlineCode",{parentName:"p"},"std::shared_ptr::get")," at callsites."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void callee(std::shared_ptr<T> x) {\n  // read_T(*x);\n}\n\nvoid caller() {\n  callee(shared_ptr);\n}\n")),(0,l.kt)("p",null,"can be changed to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void callee(T* p) {\n  // read_T(*p);\n}\n\nvoid caller() {\n  callee(shared_ptr.get());\n}\n")),(0,l.kt)("h2",{id:"pulse_resource_leak"},"PULSE_RESOURCE_LEAK"),(0,l.kt)("p",null,'Reported as "Pulse Resource Leak" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#resource_leak"},"RESOURCE_LEAK")),(0,l.kt)("h2",{id:"pulse_uninitialized_value"},"PULSE_UNINITIALIZED_VALUE"),(0,l.kt)("p",null,'Reported as "Uninitialized Value" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#uninitialized_value"},"UNINITIALIZED_VALUE"),". Re-implemented using Pulse."),(0,l.kt)("h2",{id:"pulse_uninitialized_value_latent"},"PULSE_UNINITIALIZED_VALUE_LATENT"),(0,l.kt)("p",null,'Reported as "Uninitialized Value" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#pulse_uninitialized_value"},"PULSE_UNINITIALIZED_VALUE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy"},"PULSE_UNNECESSARY_COPY"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This is reported when Infer detects an unnecessary copy of an object via copy constructor where neither the source nor the copied variable are modified before the variable goes out of scope. Rather than the copy, a reference to the source object could be used to save memory."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct A {\n  int a;\n};\n\nint unnecessary_copy(A& x){\n  auto y = x; // calls copy constructor\n  return y.a; // y is not modified after copy, hence we could avoid the copy by adding & after auto as below\n}\n\nint use_reference_instead(A& x){\n  auto& y = x; // copy the ref only\n  return y.a;\n}\n")),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_assignment"},"PULSE_UNNECESSARY_COPY_ASSIGNMENT"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Assignment" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#pulse_unnecessary_copy"},"PULSE_UNNECESSARY_COPY"),"."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_assignment_const"},"PULSE_UNNECESSARY_COPY_ASSIGNMENT_CONST"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Assignment from Const" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#pulse_unnecessary_copy"},"PULSE_UNNECESSARY_COPY"),"."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_assignment_movable"},"PULSE_UNNECESSARY_COPY_ASSIGNMENT_MOVABLE"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Assignment Movable" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#pulse_unnecessary_copy_movable"},"PULSE_UNNECESSARY_COPY_MOVABLE"),"."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_intermediate"},"PULSE_UNNECESSARY_COPY_INTERMEDIATE"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Intermediate" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This is reported when Infer detects an unnecessary temporary copy of an intermediate object where copy is created to be passed down to a function unnecessarily. Instead, the intermediate object should either be moved into the callee or the type of the callee's parameter should be made ",(0,l.kt)("inlineCode",{parentName:"p"},"const &"),"."),(0,l.kt)("p",null,"A prime example of this occurs when we call a function with a call-by-value parameter as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void callee(ExpensiveObject obj) {\n  // ....\n}\n\nvoid caller() {\n  callee(myExpensiveObj); // a copy of myExpensiveObj is created\n  // the copy is destroyed right after the call  \n}\n")),(0,l.kt)("p",null,"In this case, when we call ",(0,l.kt)("inlineCode",{parentName:"p"},"callee"),", under the hood, a copy of the argument ",(0,l.kt)("inlineCode",{parentName:"p"},"myExpensiveObj")," is created to be passed to the function call. However, the copy might be unnecessary if"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callee")," doesn\u2019t modify its parameter \u2192 then we can change its type to ",(0,l.kt)("inlineCode",{parentName:"li"},"const ExpensiveObject&"),", getting rid of the copy at caller"),(0,l.kt)("li",{parentName:"ul"},"even if ",(0,l.kt)("inlineCode",{parentName:"li"},"callee")," might modify the object, if the argument ",(0,l.kt)("inlineCode",{parentName:"li"},"myExpensiveObj")," is never used later on, we can get rid of the copy by moving it instead: ",(0,l.kt)("inlineCode",{parentName:"li"},"callee(std::move(myExpensiveObj))"),".")),(0,l.kt)("p",null,"The analysis is careful about suggesting moves blindly though: if the argument ",(0,l.kt)("inlineCode",{parentName:"p"},"myExpensiveObj")," is of type ",(0,l.kt)("inlineCode",{parentName:"p"},"const & ExpensiveObject")," then we also recommend that for move to work, const-reference needs to be removed."),(0,l.kt)("p",null,"PS: We check for other conditions on the argument here: e.g. it should be local to the procedure, as moving a non-local member might cause other memory correctness issues like use-after-move later on."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_intermediate_const"},"PULSE_UNNECESSARY_COPY_INTERMEDIATE_CONST"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Intermediate from Const" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#pulse_unnecessary_copy"},"PULSE_UNNECESSARY_COPY"),"."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_movable"},"PULSE_UNNECESSARY_COPY_MOVABLE"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Movable" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This is reported when Infer detects an unnecessary copy into a field where"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the source is an rvalue-reference"),(0,l.kt)("li",{parentName:"ul"},"the source is not modified before it goes out of scope or is destroyed.")),(0,l.kt)("p",null,"Note that the copy can be modified since it has the ownership of the object."),(0,l.kt)("p",null,"Fix: Rather than the copying into the field, the source should be moved into it."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct A {\n  std::vector<int> vec;\n};\n\nclass Test {\n  A mem_a;\n\n  void unnecessary_copy(A&& src) {\n   mem_a = src;\n   // fix is to move as follows\n   // mem_a = std::move(src);\n  }\n\n};\n\n")),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_optional"},"PULSE_UNNECESSARY_COPY_OPTIONAL"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy to Optional" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This is reported when Infer detects an unnecessary copy of an object via ",(0,l.kt)("inlineCode",{parentName:"p"},"optional")," value\nconstruction where the source is not modified before it goes out of scope.  To avoid the copy, we\ncan move the source object or change the callee's type."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void get_optional_value(std::optional<A> x) {}\n\nvoid pass_non_optional_value(A x) {\n  get_optional_value(x);\n  // fix is to move as follows\n  // get_optional_value(std::move(x));\n}\n")),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_optional_const"},"PULSE_UNNECESSARY_COPY_OPTIONAL_CONST"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy to Optional from Const" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#pulse_unnecessary_copy_optional"},"PULSE_UNNECESSARY_COPY_OPTIONAL"),"."),(0,l.kt)("h2",{id:"pulse_unnecessary_copy_return"},"PULSE_UNNECESSARY_COPY_RETURN"),(0,l.kt)("p",null,'Reported as "Unnecessary Copy Return" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"This is similar to ",(0,l.kt)("a",{parentName:"p",href:"#pulse_unnecessary_copy"},"PULSE_UNNECESSARY_COPY"),", but reported when a callee returns a copied value and it is not modified in its caller.  We may be able to return const-ref typed value or try ",(0,l.kt)("inlineCode",{parentName:"p"},"std::move")," to avoid the copy."),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyClass {\n  T v;\n public:\n  T get() {\n    return v; // v is copied here, which is avoidable.\n  }\n};\n\nvoid caller(MyClass obj) {\n  T x = obj.get();\n  std::cout << x; // x is not modified.\n}\n")),(0,l.kt)("h2",{id:"pure_function"},"PURE_FUNCTION"),(0,l.kt)("p",null,'Reported as "Pure Function" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-purity"},"purity"),"."),(0,l.kt)("p",null,"This issue type indicates pure functions. For instance, below functions would be marked as pure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int local_write_pure(int x, int y) {\n  int k = x + y;\n  k++;\n  return k;\n}\n\n// no change to outside state, the local allocation is ok.\nint local_alloc_pure(ArrayList<Integer> list) {\n  ArrayList<Integer> list_new = new ArrayList<Integer>();\n  for (Integer el : list) {\n    list_new.add(el);\n  }\n  return list_new.size();\n}\n")),(0,l.kt)("p",null,"However, the following ones would not be pure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void swap_impure(int[] array, int i, int j) {\n  int tmp = array[i];\n  array[i] = array[j]; // modifying the input array\n  array[j] = tmp;\n}\n\nint a = 0;\nvoid set_impure(int x, int y) {\n  a = x + y; //modifying a global variable\n}\n")),(0,l.kt)("h2",{id:"quandary_taint_error"},"QUANDARY_TAINT_ERROR"),(0,l.kt)("p",null,'Reported as "Taint Error" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Generic taint error when nothing else fits."),(0,l.kt)("h2",{id:"regex_op_on_ui_thread"},"REGEX_OP_ON_UI_THREAD"),(0,l.kt)("p",null,'Reported as "Regex Op On Ui Thread" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"A potentially costly operation on a regular expression occurs on the UI thread."),(0,l.kt)("h2",{id:"resource_leak"},"RESOURCE_LEAK"),(0,l.kt)("p",null,'Reported as "Resource Leak" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-biabduction"},"biabduction"),"."),(0,l.kt)("p",null,"Infer reports resource leaks in C, Objective-C and Java. In general, resources\nare entities such as files, sockets, connections, etc, that need to be closed\nafter being used."),(0,l.kt)("h3",{id:"resource-leak-in-c"},"Resource leak in C"),(0,l.kt)("p",null,"This is an example of a resource leak in C code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'-(void) resource_leak_bug {\n    FILE *fp;\n    fp=fopen("c:\\\\test.txt", "r"); // file opened and not closed.\n}\n')),(0,l.kt)("h3",{id:"resource-leak-in-java"},"Resource leak in Java"),(0,l.kt)("p",null,"For the remaining of this section, we will consider examples of resource leaks\nin Java code."),(0,l.kt)("p",null,"TIP: A common source of bugs is ",(0,l.kt)("b",null,"exceptions skipping past close()\nstatements"),". That is the first thing to look for if INFER reports a potential\nresource leak."),(0,l.kt)("h3",{id:"basics-and-standard-idiom"},"Basics and Standard Idiom"),(0,l.kt)("p",null,"Some objects in Java, the ",(0,l.kt)("i",null,"resources"),", are supposed to be closed when you\nstop using them, and failure to close is a ",(0,l.kt)("i",null,"resource leak"),". Resources\ninclude input streams, output streams, readers, writers, sockets, http\nconnections, cursors, and json parsers."),(0,l.kt)("p",null,"The standard idiom is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  // Standard idiom\n  Allocate resource\n  try {\n    do some stuff\n  } finally {\n    close resource\n  }\n")),(0,l.kt)("p",null,"or more for example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  //  Standard Idiom\n  public static void foo () throws IOException{\n    FileOutputStream fos = new FileOutputStream(new File("whatever.txt"));\n    try {\n      fos.write(7);\n    } finally {\n      fos.close();\n    }\n  }\n')),(0,l.kt)("p",null,"and you should use the standard idiom for the most part, when you don't want to\nreturn the resource to the surrounding context."),(0,l.kt)("p",null,"Sometimes people just leave out close(), and that is a bug, but more typically\nexceptional paths are the root of the problem, as in"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  // leak because of exception\n  public static void foo () throws IOException {\n    FileOutputStream fos = new FileOutputStream(new File("whatever.txt"));\n    fos.write(7);   //DOH! What if exception?\n    fos.close();\n  }\n')),(0,l.kt)("p",null,"where an exception in fos.write will cause execution to skip past the close()\nstatement."),(0,l.kt)("h4",{id:"multiple-resources-bugs"},"Multiple Resources Bugs"),(0,l.kt)("p",null,"We can deal with multiple resources correctly and simply just by nesting the\nstandard idiom."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  // Two Resources nested\n  public static void foo() throws IOException {\n    FileInputStream fis = new FileInputStream(new File("whatever.txt"));\n    try {\n      FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"));\n      try {\n        fos.write(fis.read());\n      } finally {\n        fos.close();\n      }\n    } finally {\n      fis.close();\n    }\n  }\n')),(0,l.kt)("p",null,"Bugs often occur when using multiple resources in other ways because of\nexceptions in close() methods. For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  // Classic Two Resources Bug\n  public static void foo() throws IOException {\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    try {\n      fis = new FileInputStream(new File("whatever.txt"));\n      fos = new FileOutputStream(new File("everwhat.txt"));\n      fos.write(fis.read());\n    } finally {\n      if (fis!=null)  fis.close();\n      if (fos!=null) fos.close();\n    }\n  }\n')),(0,l.kt)("p",null,"Here, if there is an exception in the call to fis.close() execution will skip\npast fos.close(); a leak."),(0,l.kt)("p",null,"Another way, besides the standard idiom, to deal with this problem is to swallow\nexceptions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  // Two Resources Fix 1\n  public static void foo() throws IOException {\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    try {\n      fis = new FileInputStream(new File("whatever.txt"));\n      fos = new FileOutputStream(new File("everwhat.txt"));\n      fos.write(fis.read());\n    } finally {\n      try {\n        if (fis!=null) fis.close();\n      } catch (Exception e) {};  // Exception swallowing\n      if (fos!=null) fos.close();\n    }\n  }\n')),(0,l.kt)("p",null,"You can also swallow the exception on the output stream. Some people prefer not\nto swallow output stream exceptions, and also flush before closing.\n",(0,l.kt)("a",{parentName:"p",href:"http://code.google.com/p/guava-libraries/issues/detail?id=1118"},"http://code.google.com/p/guava-libraries/issues/detail?id=1118")),(0,l.kt)("p",null,"Notice that the nested standard idiom does not need the checks for null, which\nare in there in this case to protect against the case when one of the\nallocations throws an exception, in which case one would get a\nNullPointerException."),(0,l.kt)("h3",{id:"nested_allocations"},"Nested_Allocations"),(0,l.kt)("p",null,"When a resource allocation is included as an argument to a constructor, if the\nconstructor fails it can leave an unreachable resource that no one can close."),(0,l.kt)("p",null,"For example gzipOutputStream = new GZIPOutputStream(new FileOutputStream(out));\nis bad in case the outer constructor, GZIPOutputStream, throws an exception. In\nthat case, no one will have a hold of the FileOutputStream and so no one will be\nable to close it."),(0,l.kt)("p",null,"In such a case you need to move the allocation the FileOutputStream out of the\nnested position and name it, so you are able to close if anything goes wrong\nduring execution of the GZIPOutputStream constructor."),(0,l.kt)("p",null,"Here are resources that can throw exceptions i their constructor(s)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ObjectInputStream , ObjectOutputStream, PipedInputStream, PipedOutputStream,\nPipedReader, PipedWriter, JarInputStream, JarOutputStream, GZIPInputStream,\nGZIPOutputStream , ZipFile all throw IOException"),(0,l.kt)("li",{parentName:"ul"},"PrintStream throws UnsupportedEncodingException")),(0,l.kt)("p",null,"The constructors for FileInputStream, FileOutputStream and RandomAccessFile\nthrow FileNotFoundException, but these cases are not problematic in the sense\nthat their arguments are not resources and so they do not cause the nested\nresource leak."),(0,l.kt)("h3",{id:"allocation-of-jsonparser-and-cursor-resources"},"Allocation of JSonParser and Cursor resources"),(0,l.kt)("p",null,'Some resources are created inside libraries instead of by "new".'),(0,l.kt)("p",null,"Cursor is an interface, the actual resources are something like SQLiteCursor.\nSo, every time you call a function that returns a Cursor object, there is an\nallocation."),(0,l.kt)("p",null,"For instance, in the functions from SQLiteDatabase query(\u2026) and rawQuery(\u2026)\nallocate a cursor resource. For SQLiteQueryBuilder, ContentProviderClient,\nContentResolver. MediaStore and DownloadManager it is only query(\u2026) Cursor\nobjects cursor created by these functions need to be closed (i.e.,\ncursor.close())."),(0,l.kt)("p",null,"Similarly, JsonParser is an abstract class, and create a resource in functions\nfrom the class JsonFactory createParser(byte[] data) createParser(byte[] data,\nint offset, int len) createParser(String content) createParser(URL url)\ncreateParser(File f) JsonParser objects js created by these functions need to be\nclosed (jp.close()). On the other hand . JasonParsers gotten from\ncreateParser(InputStream in) and createParser(Reader r) give you JsonParsers\nthat don\u2019t need to be closed. This is because they receive the resource from\nsomewhere that will maintain the responsibility to close it."),(0,l.kt)("h3",{id:"escaping-resources-and-exceptions"},"Escaping resources and exceptions"),(0,l.kt)("p",null,"Sometimes you want to return a resource to the outside, in which case you should\nnot close it, but you still need to be careful of exceptions in case control\nskips past the return leaving no one to close. Here is a simple example of a\npositive use of escaping resources."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  // An escaping resource, shouldn't close\n  public BugReportAttachment createAttachment(File reportDirectory, String fileName)\n      throws FileNotFoundException {\n    File file = new File(reportDirectory, fileName);\n    OutputStream stream = new FileOutputStream(file);\n    return new BugReportAttachment(Uri.fromFile(file), stream);\n  }\n")),(0,l.kt)("p",null,"In this case it is intended that an object that wraps ",(0,l.kt)("inlineCode",{parentName:"p"},"stream")," is passed to the\ncaller of ",(0,l.kt)("inlineCode",{parentName:"p"},"createAttachment"),". You should certainly not close stream here,\nbecause it is being passed to the outside."),(0,l.kt)("p",null,"But for escaping resources like this you still need to be careful of exceptions.\nFor example, in"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  // An escaping resource, and a leak\n  public BugReportAttachment createAttachment(File reportDirectory, String fileName)\n      throws FileNotFoundException {\n    File file = new File(reportDirectory, fileName);\n    OutputStream stream = new FileOutputStream(file);\n    stream.write(7);\n    return new BugReportAttachment(Uri.fromFile(file), stream);\n  }\n")),(0,l.kt)("p",null,"if stream.write(7) throws an exception, then no one will have a hold of stream,\nand no one will be able to close it; a leak."),(0,l.kt)("h3",{id:"java-7s-try-with-resources"},"Java 7's try-with-resources"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(For use with Java 7 only)")),(0,l.kt)("p",null,"Clearly, accounting for the ramifications of all the exceptional cases is\ncomplicated, and there is a better way in Java 7."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  // Two Resources Fix 2; via try-with-resources\n  public static void foo() throws IOException {\n    try (\n      FileInputStream fis = new FileInputStream(new File("whatever.txt"));\n      FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"))\n    ) {\n      fos.write(fis.read());\n    }\n  }\n')),(0,l.kt)("p",null,"All the complicated exceptional cases above are (apparently) covered by this\nconstruct, and the result is much simpler."),(0,l.kt)("p",null,"So, if you are trying to fix a potential leak in code with multiples resources\nyou can go ahead and try to understand whether the potential leak is real. Or,\nif the code is complex and it is hard to figure out, it would be perfectly\nlegitimate to simply convert the code over to try-with-resources if you have\naccess to Java 7, so as to save yourself some brain-cycles. You will also end up\nwith cleaner code."),(0,l.kt)("p",null,"If try-with-resources is so great you should ",(0,l.kt)("i",null,"always"),' use it. But you\nshouldn\'t\u2026 Try-with-resources gives resources static scoping, and works via a\nstack discipline. Sometimes, you want a resource to persist beyond scope, as in\nthe escaping example above. In an escaping example maybe you could refactor lots\nof code so that try-with-resources applies, and maybe you cannot in a sensible\nway. This just illustrates that, though you might hear people say that\ntry-with-resources "solves" the resource problem, it does not. It is very\nuseful, but you cannot use it blindly when you see a resource-allocation site.'),(0,l.kt)("h2",{id:"retain_cycle"},"RETAIN_CYCLE"),(0,l.kt)("p",null,'Reported as "Retain Cycle" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A retain cycle is a situation when object A retains object B, and object B\nretains object A at the same time. Here is an example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"@class Child;\n@interface Parent : NSObject {\n    Child *child; // Instance variables are implicitly __strong\n}\n@end\n@interface Child : NSObject {\n    Parent *parent;\n}\n@end\n")),(0,l.kt)("p",null,"You can fix a retain cycle in ARC by using ","_","_",'weak variables or weak properties\nfor your "back links", i.e. links to direct or indirect parents in an object\nhierarchy:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"@class Child;\n@interface Parent : NSObject {\n    Child *child;\n}\n@end\n@interface Child : NSObject {\n    __weak Parent *parent;\n}\n@end\n")),(0,l.kt)("h2",{id:"scope_leakage"},"SCOPE_LEAKAGE"),(0,l.kt)("p",null,'Reported as "Scope Leakage" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-scope-leakage"},"scope-leakage"),"."),(0,l.kt)("p",null,'This issue type indicates that a class with scope annotation A stores a field\nwith whose (dynamic) type (or one of its super types) is annotated with scope\nB such that a scope nesting restriction is violated. By "stores", we mean\neither directly or transitively.'),(0,l.kt)("p",null,"A configuration is used to list the set of scopes and the must-not-hold relation."),(0,l.kt)("p",null,"In the following Java example, the set of scopes is Outer and Inner, and the must-not-hold\nrelation is simply {(Outer, Inner)}:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@ScopeType(value = Outer.class)\nclass ClassOfOuterScope {\n  final ClassOfInner c = new ClassOfInner(); // <-- warn here that ClassOfInner would leak.\n}\n\n@ScopeType(value = Inner.class)\nclass ClassOfInner {}\n")),(0,l.kt)("p",null,"Here is a more detailed description of the analysis."),(0,l.kt)("p",null,'This analysis operates over Java bytecode. It assumes that types (classes, interfaces, enums,\netc.) may be annotated with so-called scope annotations. The analysis is parameterized by a set\nof scopes and a "must-not-hold" relation over pairs of scopes, which it reads from a\nconfiguration file.'),(0,l.kt)("p",null,'The analysis aims to detect violations of the following property: if there exist a path of\nfields from object OA to object OB and the type of OA (or one of its super-types) is annotated\nwith scope SA and the type of OB (or one of its super-types) is annotated with scope SB then\nmust-not-hold(SA, SB) must be false. Intuitively, the given objects have different scopes that\nshould not be nested, for example, different intended lifetimes, and a forbidden path from OA to\nOB results in OB "leaking" out of the scope SA.'),(0,l.kt)("p",null,'The implementation reads a configuration to determine a list of (scope) "generators" for each\ntype of scope and a scope class for each type of scope. A generator for a scope type SA is given\nby the name of a class and a list of methods where it is understood that any of the methods\nlisted for the given class returns an object that is known to have scope SA. (This can be seen\nas a form of lightweight modeling.) A scope class is the name of the class that represents a\ngiven scope.'),(0,l.kt)("h2",{id:"sensitive_data_flow"},"SENSITIVE_DATA_FLOW"),(0,l.kt)("p",null,'Reported as "Sensitive Data Flow" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A flow of sensitive data was detected from a source."),(0,l.kt)("h2",{id:"shell_injection"},"SHELL_INJECTION"),(0,l.kt)("p",null,'Reported as "Shell Injection" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Environment variable or file data flowing to shell."),(0,l.kt)("h2",{id:"shell_injection_risk"},"SHELL_INJECTION_RISK"),(0,l.kt)("p",null,'Reported as "Shell Injection Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Code injection if the caller of the endpoint doesn't sanitize on its end."),(0,l.kt)("h2",{id:"sql_injection"},"SQL_INJECTION"),(0,l.kt)("p",null,'Reported as "Sql Injection" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted and unescaped data flows to SQL."),(0,l.kt)("h2",{id:"sql_injection_risk"},"SQL_INJECTION_RISK"),(0,l.kt)("p",null,'Reported as "Sql Injection Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted and unescaped data flows to SQL."),(0,l.kt)("h2",{id:"stack_variable_address_escape"},"STACK_VARIABLE_ADDRESS_ESCAPE"),(0,l.kt)("p",null,'Reported as "Stack Variable Address Escape" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"Reported when an address pointing into the stack of the current\nfunction will escape to its calling context. Such addresses will\nbecome invalid by the time the function actually returns so are\npotentially dangerous."),(0,l.kt)("p",null,"For example, directly returning a pointer to a local variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-C"},'int* foo() {\n   int x = 42;\n   return &x; // <-- warn here that "&x" will escape\n}\n')),(0,l.kt)("h2",{id:"starvation"},"STARVATION"),(0,l.kt)("p",null,'Reported as "UI Thread Starvation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"This error is reported in Java, and specifically on Android. These reports are\ntriggered when a method that runs on the UI thread may block, thus potentially\nleading to an Application Not Responding error."),(0,l.kt)("p",null,"Infer considers a method as running on the UI thread whenever:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The method, one of its overrides, its class, or an ancestral class, is\nannotated with ",(0,l.kt)("inlineCode",{parentName:"li"},"@UiThread"),"."),(0,l.kt)("li",{parentName:"ul"},"The method, or one of its overrides is annotated with ",(0,l.kt)("inlineCode",{parentName:"li"},"@OnEvent"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"@OnClick"),",\netc."),(0,l.kt)("li",{parentName:"ul"},"The method or its callees call a ",(0,l.kt)("inlineCode",{parentName:"li"},"Litho.ThreadUtils")," method such as\n",(0,l.kt)("inlineCode",{parentName:"li"},"assertMainThread"),".")),(0,l.kt)("p",null,"The issue is reported when a method deemed to run on the UI thread"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Makes a method call which may block."),(0,l.kt)("li",{parentName:"ul"},"Takes a lock, and another thread takes the same lock, and before releasing it,\nmakes a call that may block.")),(0,l.kt)("p",null,"Calls that may block are considered:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Certain I/O calls."),(0,l.kt)("li",{parentName:"ul"},"Two way ",(0,l.kt)("inlineCode",{parentName:"li"},"Binder.transact")," calls."),(0,l.kt)("li",{parentName:"ul"},"Certain OS calls."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Future")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"AsyncTask")," calls to ",(0,l.kt)("inlineCode",{parentName:"li"},"get")," without timeouts, or with too large\ntimeouts.")),(0,l.kt)("p",null,"To suppress starvation reports in a method ",(0,l.kt)("inlineCode",{parentName:"p"},"m()")," use the\n",(0,l.kt)("inlineCode",{parentName:"p"},'@SuppressLint("STARVATION")')," annotation, as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'  import android.annotation.SuppressLint;\n\n  @SuppressLint("STARVATION")\n  public void m() {\n  ...\n  }\n')),(0,l.kt)("p",null,"To signal to Infer that a method does not perform any blocking calls, despite\nappearences, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@NonBlocking")," annotation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"  import com.facebook.infer.annotation.NonBlocking;\n\n  @NonBlocking\n  public void m() {\n  ...\n  }\n")),(0,l.kt)("p",null,"This instructs Infer to filter out any potentially blocking calls in ",(0,l.kt)("inlineCode",{parentName:"p"},"m()"),"\n(also, transitively), and thus any other method can expect no starvation reports\ndue to a call to ",(0,l.kt)("inlineCode",{parentName:"p"},"m()"),". You will need to set up your class path appropriately to\ninclude the JAR files in ",(0,l.kt)("inlineCode",{parentName:"p"},"infer/annotations")," for this annotation to work."),(0,l.kt)("h2",{id:"static_initialization_order_fiasco"},"STATIC_INITIALIZATION_ORDER_FIASCO"),(0,l.kt)("p",null,'Reported as "Static Initialization Order Fiasco" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-siof"},"siof"),"."),(0,l.kt)("p",null,"This error is reported in C++. It fires when the initialization of a static\nvariable ",(0,l.kt)("inlineCode",{parentName:"p"},"A"),", accesses a static variable ",(0,l.kt)("inlineCode",{parentName:"p"},"B")," from another translation unit\n(usually another ",(0,l.kt)("inlineCode",{parentName:"p"},".cpp")," file). There are no guarantees whether ",(0,l.kt)("inlineCode",{parentName:"p"},"B")," has been\nalready initialized or not at that point."),(0,l.kt)("p",null,"For more technical definition and techniques to avoid/remediate, see the\n",(0,l.kt)("a",{parentName:"p",href:"https://isocpp.org/wiki/faq/ctors#static-init-order"},"FAQ"),"."),(0,l.kt)("h2",{id:"strict_mode_violation"},"STRICT_MODE_VIOLATION"),(0,l.kt)("p",null,'Reported as "Strict Mode Violation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-starvation"},"starvation"),"."),(0,l.kt)("p",null,"Android has a feature called\n",(0,l.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/os/StrictMode"},"strict mode"),",\nwhich if enabled, will flag the occasions where the main thread makes a call\nthat results in disk I/O, waiting on a network socket, etc. The analysis\ncatching starvation errors and deadlocks (the ",(0,l.kt)("inlineCode",{parentName:"p"},"--starvation")," analysis) has the\nability to statically detect such violations."),(0,l.kt)("p",null,"To suppress this warning, it's enough to annotate the offending method with\n",(0,l.kt)("inlineCode",{parentName:"p"},'@SuppressLint("STRICT_MODE_VIOLATION")'),"."),(0,l.kt)("h2",{id:"strong_self_not_checked"},"STRONG_SELF_NOT_CHECKED"),(0,l.kt)("p",null,'Reported as "StrongSelf Not Checked" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-self-in-block"},"self-in-block"),"."),(0,l.kt)("p",null,"This checks reports a potential issue when a block captures ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," (a weak pointer to ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),"),\nthen one assigns this pointer to a local variable ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," inside the block and uses this variable\nwithout checking first whether it is ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),". The problem here is that the weak pointer could be ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," at\nthe time when the block is executed. So, the correct usage is to first check whether ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," is a valid\npointer, and then use it."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"__weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n    int y = strongSelf->x;\n    ...\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action:"),"\nAdd a check for ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"__weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n    if (strongSelf) {\n      int y = strongSelf->x;\n      ...\n    }\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Limitations:")," To keep this check simple and intra-procedural, we rely on names to find ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),':\nwe assume that any captured weak pointer whose name contains "self" is a weak reference to ',(0,l.kt)("inlineCode",{parentName:"p"},"self"),".\nIn contrast, ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," is a local variable to the block, so the check supports any name given to\na local strong pointer that has been assigned ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),"."),(0,l.kt)("h2",{id:"taint_error"},"TAINT_ERROR"),(0,l.kt)("p",null,'Reported as "Taint Error" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A taint flow was detected from a source to a sink"),(0,l.kt)("h2",{id:"thread_safety_violation"},"THREAD_SAFETY_VIOLATION"),(0,l.kt)("p",null,'Reported as "Thread Safety Violation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-racerd"},"racerd"),"."),(0,l.kt)("p",null,"This warning indicates a potential data race in Java. The analyser is called\nRacerD and this section gives brief but a mostly complete description of its\nfeatures. See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-racerd"},"RacerD page")," for more in-depth information and\nexamples."),(0,l.kt)("h3",{id:"thread-safety-what-is-a-data-race"},"Thread-safety: What is a data race"),(0,l.kt)("p",null,"Here a data race is a pair of accesses to the same member field such that:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"at least one is a write, and,"),(0,l.kt)("li",{parentName:"ul"},"at least one occurs without any lock synchronization, and,"),(0,l.kt)("li",{parentName:"ul"},"the two accesses occur on threads (if known) which can run in parallel.")),(0,l.kt)("h3",{id:"thread-safety-potential-fixes"},"Thread-safety: Potential fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Synchronizing the accesses (using the ",(0,l.kt)("inlineCode",{parentName:"li"},"synchronized")," keyword, thread-exclusion\nsuch as atomic objects, ",(0,l.kt)("inlineCode",{parentName:"li"},"volatile")," etc)."),(0,l.kt)("li",{parentName:"ul"},"Making an offending method private -- this will exclude it from being checked\nat the top level, though it will be checked if called by a public method which\nmay itself, e.g., hold a lock when calling it."),(0,l.kt)("li",{parentName:"ul"},"Putting the two accesses on the same thread, e.g., by using ",(0,l.kt)("inlineCode",{parentName:"li"},"@MainThread")," or\n",(0,l.kt)("inlineCode",{parentName:"li"},"@ThreadConfined"),".")),(0,l.kt)("h3",{id:"thread-safety-conditions-checked-before-reporting"},"Thread-safety: Conditions checked before reporting"),(0,l.kt)("p",null,"The class and method are not marked ",(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadSafe(enableChecks = false)"),", and,"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The method is declared ",(0,l.kt)("inlineCode",{parentName:"li"},"synchronized"),", or employs (non-transitively) locking,\nor,"),(0,l.kt)("li",{parentName:"ul"},"The class is not marked ",(0,l.kt)("inlineCode",{parentName:"li"},"@NotThreadSafe"),", and,",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The class/method is marked ",(0,l.kt)("inlineCode",{parentName:"li"},"@ThreadSafe,")," or one of the configured synonyms\nin ",(0,l.kt)("inlineCode",{parentName:"li"},".inferconfig"),", or,"),(0,l.kt)("li",{parentName:"ul"},"A parent class, or an override method are marked with the above annotations.")))),(0,l.kt)("p",null,"NB currently RacerD ",(0,l.kt)("strong",{parentName:"p"},"does not take into account ",(0,l.kt)("inlineCode",{parentName:"strong"},"@GuardedBy")),"."),(0,l.kt)("h3",{id:"thread-safety-thread-annotations-recognized-by-racerd"},"Thread-safety: Thread annotations recognized by RacerD"),(0,l.kt)("p",null,"These class and method annotations imply the method is on the main thread:\n",(0,l.kt)("inlineCode",{parentName:"p"},"@MainThread"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@UiThread")),(0,l.kt)("p",null,"These method annotations imply the method is on the main thread: ",(0,l.kt)("inlineCode",{parentName:"p"},"@OnBind"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"@OnEvent"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@OnMount"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@OnUnbind"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@OnUnmount")),(0,l.kt)("p",null,"Both classes of annotations work through the inheritance tree (i.e. if a parent\nclass or method is marked with one of these annotations, so is the child class /\nmethod override)."),(0,l.kt)("p",null,"In addition to these, RacerD recognizes many lifecycle methods as necessarily\nrunning on the main thread, eg ",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment.onCreate")," etc."),(0,l.kt)("p",null,"Finally, the thread status of being on the main thread propagates backwards\nthrough the call graph (ie if ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," calls ",(0,l.kt)("inlineCode",{parentName:"p"},"bar")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bar")," is marked ",(0,l.kt)("inlineCode",{parentName:"p"},"@UiThtread"),"\nthen ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," is automatically considered on the main thread too). Calling\n",(0,l.kt)("inlineCode",{parentName:"p"},"assertMainThread"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"assertOnUiThread"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"checkOnMainThread")," has the same effect."),(0,l.kt)("p",null,"NB RacerD currently ",(0,l.kt)("strong",{parentName:"p"},"does not recognize ",(0,l.kt)("inlineCode",{parentName:"strong"},"@WorkerThread"),", ",(0,l.kt)("inlineCode",{parentName:"strong"},"@BinderThread")," or\n",(0,l.kt)("inlineCode",{parentName:"strong"},"@AnyThread")),"."),(0,l.kt)("h3",{id:"thread-safety-other-annotations-and-what-they-do"},"Thread-safety: Other annotations and what they do"),(0,l.kt)("p",null,"These annotations can be found at ",(0,l.kt)("inlineCode",{parentName:"p"},"com.facebook.infer.annotation.*"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@Functional")," This is a method annotation indicating the method always returns\nthe same value. When a method ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," is annotated ",(0,l.kt)("inlineCode",{parentName:"p"},"@Functional"),", RacerD will\nignore any writes of the return value of ",(0,l.kt)("inlineCode",{parentName:"p"},"foo"),". For example, in\n",(0,l.kt)("inlineCode",{parentName:"p"},"this.x = foo()"),", the write to ",(0,l.kt)("inlineCode",{parentName:"p"},"this.x")," is ignored. The reasoning is that if\nthe method returns the same value whenever it's called, any data race on\n",(0,l.kt)("inlineCode",{parentName:"p"},"this.x")," is benign, if that is the only write.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadConfined")," This is a class/method/field annotation which takes a single\nparameter which can be ",(0,l.kt)("inlineCode",{parentName:"p"},"UI"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ANY")," or a user chosen string. It indicates to\nRacerD a thread identifier for the class/method/field. Thus,\n",(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadConfined(UI)")," is equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"@UiThread"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"@ThreadConfined(ANY)"),"\nis equivalent to not having the annotation at all, for classes and methods.\nWhen this annotation is applied to a field it instructs Infer to assume\n(without checking) that all accesses to that field are made on the same thread\n(and can, therefore, not race by definition). The intention is that RacerD\nuses that to detect exclusion between accesses occurring on the same thread.\nHowever, only the UI thread is supported at this time, and any user provided\nvalue is considered equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"UI"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@VisibleForTesting")," A method annotation making Infer consider the method as\neffectively ",(0,l.kt)("inlineCode",{parentName:"p"},"private"),". This means it will not be checked for races against\nother non-private methods of the class, but only if called by one.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@ReturnsOwnership")," A method annotation indicating that the method returns a\nfreshly owned object. Accesses to the returned value will not be considered\nfor data races, as the object is in-effect unique and not accessible yet from\nother threads. The main utility of this annotation is in interfaces, where\nInfer cannot look up the implementation and decide for itself."))),(0,l.kt)("h2",{id:"topl_error"},"TOPL_ERROR"),(0,l.kt)("p",null,'Reported as "Topl Error" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-topl"},"topl"),"."),(0,l.kt)("p",null,"A violation of a Topl property (user-specified).\nThere is an execution path in the code that drives a Topl property from a start state to an error state."),(0,l.kt)("p",null,"This indicates that the code has a user-defined undesired behavior."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-topl##what-is-it"},"Topl")," for an example"),(0,l.kt)("h2",{id:"topl_error_latent"},"TOPL_ERROR_LATENT"),(0,l.kt)("p",null,'Reported as "Topl Error Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-topl"},"topl"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#topl_error"},"TOPL_ERROR"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"uninitialized_value"},"UNINITIALIZED_VALUE"),(0,l.kt)("p",null,'Reported as "Uninitialized Value" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-uninit"},"uninit"),"."),(0,l.kt)("p",null,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results."),(0,l.kt)("p",null,"Using uninitialized values can lead to undefined behaviors possibly resulting in crashes, security failures and invalid results."),(0,l.kt)("p",null,"This can easily be fixed by assigning all variables to an initial value when declaring them."),(0,l.kt)("p",null,"This, for example, in C:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct coordinates {\n  int x;\n  int y;\n};\n\nvoid foo() {\n  struct coordinates c;\n  c.x = 42;\n  c.y++; // uninitialized value c.y!\n\n  int z;\n  if (z == 0) { // uninitialized value z!\n    // something\n  }\n}\n")),(0,l.kt)("h2",{id:"untrusted_buffer_access"},"UNTRUSTED_BUFFER_ACCESS"),(0,l.kt)("p",null,'Reported as "Untrusted Buffer Access" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted data of any kind flowing to buffer."),(0,l.kt)("h2",{id:"untrusted_deserialization"},"UNTRUSTED_DESERIALIZATION"),(0,l.kt)("p",null,'Reported as "Untrusted Deserialization" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"User-controlled deserialization."),(0,l.kt)("h2",{id:"untrusted_deserialization_risk"},"UNTRUSTED_DESERIALIZATION_RISK"),(0,l.kt)("p",null,'Reported as "Untrusted Deserialization Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"User-controlled deserialization"),(0,l.kt)("h2",{id:"untrusted_environment_change_risk"},"UNTRUSTED_ENVIRONMENT_CHANGE_RISK"),(0,l.kt)("p",null,'Reported as "Untrusted Environment Change Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"User-controlled environment mutation."),(0,l.kt)("h2",{id:"untrusted_file"},"UNTRUSTED_FILE"),(0,l.kt)("p",null,'Reported as "Untrusted File" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"User-controlled file creation; may be vulnerable to path traversal and more."),(0,l.kt)("h2",{id:"untrusted_file_risk"},"UNTRUSTED_FILE_RISK"),(0,l.kt)("p",null,'Reported as "Untrusted File Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"User-controlled file creation; may be vulnerable to path traversal and more."),(0,l.kt)("h2",{id:"untrusted_heap_allocation"},"UNTRUSTED_HEAP_ALLOCATION"),(0,l.kt)("p",null,'Reported as "Untrusted Heap Allocation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted data of any kind flowing to heap allocation. this can cause crashes or DOS."),(0,l.kt)("h2",{id:"untrusted_intent_creation"},"UNTRUSTED_INTENT_CREATION"),(0,l.kt)("p",null,'Reported as "Untrusted Intent Creation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Creating an Intent from user-controlled data."),(0,l.kt)("h2",{id:"untrusted_url_risk"},"UNTRUSTED_URL_RISK"),(0,l.kt)("p",null,'Reported as "Untrusted Url Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted flag, environment variable, or file data flowing to URL."),(0,l.kt)("h2",{id:"untrusted_variable_length_array"},"UNTRUSTED_VARIABLE_LENGTH_ARRAY"),(0,l.kt)("p",null,'Reported as "Untrusted Variable Length Array" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted data of any kind flowing to stack buffer allocation. Trying to allocate a stack buffer that's too large will cause a stack overflow."),(0,l.kt)("h2",{id:"user_controlled_sql_risk"},"USER_CONTROLLED_SQL_RISK"),(0,l.kt)("p",null,'Reported as "User Controlled Sql Risk" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-quandary"},"quandary"),"."),(0,l.kt)("p",null,"Untrusted data flows to SQL (no injection risk)."),(0,l.kt)("h2",{id:"use_after_delete"},"USE_AFTER_DELETE"),(0,l.kt)("p",null,'Reported as "Use After Delete" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"An address that was invalidated by a call to ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," in C++ is dereferenced."),(0,l.kt)("h2",{id:"use_after_delete_latent"},"USE_AFTER_DELETE_LATENT"),(0,l.kt)("p",null,'Reported as "Use After Delete Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#use_after_delete"},"USE_AFTER_DELETE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"use_after_free"},"USE_AFTER_FREE"),(0,l.kt)("p",null,'Reported as "Use After Free" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"An address that was invalidated by a call to ",(0,l.kt)("inlineCode",{parentName:"p"},"free")," in C is dereferenced."),(0,l.kt)("h2",{id:"use_after_free_latent"},"USE_AFTER_FREE_LATENT"),(0,l.kt)("p",null,'Reported as "Use After Free Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#use_after_free"},"USE_AFTER_FREE"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"use_after_lifetime"},"USE_AFTER_LIFETIME"),(0,l.kt)("p",null,'Reported as "Use After Lifetime" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"The lifetime of an object has ended but that object is being\naccessed. For example, the address of a variable holding a C++ object\nis accessed after the variable has gone out of scope:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void foo() {\n     X* p;\n     { // new scope\n       X x = X();\n       p = &x;\n     } // x has gone out of scope\n     p->method(); // ERROR: you should not access *p after x has gone out of scope\n}\n")),(0,l.kt)("h2",{id:"use_after_lifetime_latent"},"USE_AFTER_LIFETIME_LATENT"),(0,l.kt)("p",null,'Reported as "Use After Lifetime Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#use_after_lifetime"},"USE_AFTER_LIFETIME"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"vector_invalidation"},"VECTOR_INVALIDATION"),(0,l.kt)("p",null,'Reported as "Vector Invalidation" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"An address pointing into a C++ ",(0,l.kt)("inlineCode",{parentName:"p"},"std::vector")," might have become\ninvalid. This can happen when an address is taken into a vector, then\nthe vector is mutated in a way that might invalidate the address, for\nexample by adding elements to the vector, which might trigger a\nre-allocation of the entire vector contents (thereby invalidating the\npointers into the previous location of the contents)."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void deref_vector_element_after_push_back_bad(std::vector<int>& vec) {\n  int* elt = &vec[1];\n  vec.push_back(42); // if the array backing the vector was full already, this\n                     // will re-allocate it and copy the previous contents\n                     // into the new array, then delete the previous array\n  std::cout << *y << "\\n"; // bad: elt might be invalid\n}\n')),(0,l.kt)("h2",{id:"vector_invalidation_latent"},"VECTOR_INVALIDATION_LATENT"),(0,l.kt)("p",null,'Reported as "Vector Invalidation Latent" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse"},"pulse"),"."),(0,l.kt)("p",null,"A latent ",(0,l.kt)("a",{parentName:"p",href:"#vector_invalidation"},"VECTOR_INVALIDATION"),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-pulse#latent-issues"},"documentation on Pulse latent issues"),"."),(0,l.kt)("h2",{id:"weak_self_in_no_escape_block"},"WEAK_SELF_IN_NO_ESCAPE_BLOCK"),(0,l.kt)("p",null,'Reported as "Weak Self In No Escape Block" by ',(0,l.kt)("a",{parentName:"p",href:"/docs/next/checker-self-in-block"},"self-in-block"),"."),(0,l.kt)("p",null,"This check reports when ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," (a weak pointer to ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),') is used in\na block, and this block is passed to a "no escaping" method. This means that\nthe block passed to that method won\'t be leaving the current scope, this is\nmarked with the annotation ',(0,l.kt)("inlineCode",{parentName:"p"},"NS_NOESCAPE"),"."),(0,l.kt)("p",null,'The issue here is that, because the block is "no escaping", there is no need to use\n',(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"strongSelf")," but we can just use ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),". This has the advantage of\nnot needing to deal with the added complexity of weak pointers, and it simplifies the\ncode."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  __weak __typeof(self) weakSelf = self;\n  [self foo:^() { //foo's first parameter is annotates with `NS_NOESCAPE`\n      [weakSelf bar];\n  }];\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Action"),":"),(0,l.kt)("p",null,"Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objectivec"},"  [self foo:^() {\n      [self bar];\n  }];\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Limitations:")," To keep this check simple and intra-procedural, we rely on names to find ",(0,l.kt)("inlineCode",{parentName:"p"},"weakSelf"),':\nwe assume that any captured weak pointer whose name contains "self" is a weak reference to ',(0,l.kt)("inlineCode",{parentName:"p"},"self"),"."))}k.isMDXComponent=!0}}]);