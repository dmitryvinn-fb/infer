"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1192],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),f=a,m=c["".concat(o,".").concat(f)]||c[f]||d[f]||l;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=f;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<l;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},285:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],i={title:"Pulse",description:"Memory and lifetime analysis."},o=void 0,p={unversionedId:"checker-pulse",id:"version-1.1.0/checker-pulse",title:"Pulse",description:"Memory and lifetime analysis.",source:"@site/versioned_docs/version-1.1.0/checker-pulse.md",sourceDirName:".",slug:"/checker-pulse",permalink:"/docs/checker-pulse",draft:!1,tags:[],version:"1.1.0",frontMatter:{title:"Pulse",description:"Memory and lifetime analysis."},sidebar:"version-1.1.0/docs",previous:{title:"`printf()` Argument Types",permalink:"/docs/checker-printf-args"},next:{title:"Purity",permalink:"/docs/checker-purity"}},u={},c=[{value:"What is Infer:Pulse?",id:"what-is-inferpulse",level:3},{value:"Pulse x Nullsafe",id:"pulse-x-nullsafe",level:3},{value:"List of Issue Types",id:"list-of-issue-types",level:2}],d={toc:c},f="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)(f,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Memory and lifetime analysis."),(0,l.kt)("p",null,"Activate with ",(0,l.kt)("inlineCode",{parentName:"p"},"--pulse"),"."),(0,l.kt)("p",null,"Supported languages:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"C/C++/ObjC: Yes"),(0,l.kt)("li",{parentName:"ul"},"Java: Yes"),(0,l.kt)("li",{parentName:"ul"},"C#/.Net: No")),(0,l.kt)("h3",{id:"what-is-inferpulse"},"What is Infer:Pulse?"),(0,l.kt)("p",null,"Pulse is an interprocedural memory safety analysis. Pulse can detect, for instance, ",(0,l.kt)("a",{parentName:"p",href:"/docs/all-issue-types#nullptr_dereference"},"Null dereferences")," in Java. Errors are only reported when all conditions on the erroneous path are true regardless of input. Pulse should gradually replace the original ",(0,l.kt)("a",{parentName:"p",href:"/docs/checker-biabduction"},"biabduction")," analysis of Infer. An example of a Null dereference found by Pulse is given below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class Person {\n    Person emergencyContact;\n    String address;\n\n    Person getEmergencyContact() {\n        return this.emergencyContact;\n    }\n}\n\nclass Registry {\n    void create() {\n        Person p = new Person();\n        Person c = p.getEmergencyContact();\n        // Null dereference here\n        System.out.println(c.address);\n    }\n\n    void printContact(Person p) {\n        // No null dereference, as we don't know anything about `p`\n        System.out.println(p.getEmergencyContact().address);\n    }\n}\n")),(0,l.kt)("p",null,"How to run pulse for Java:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"infer run --pulse -- javac Test.java\n")),(0,l.kt)("p",null,"Pulse reports a Null dereference on this file on ",(0,l.kt)("inlineCode",{parentName:"p"},"create()"),", as it tries to access the field ",(0,l.kt)("inlineCode",{parentName:"p"},"address")," of object ",(0,l.kt)("inlineCode",{parentName:"p"},"c"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," has value ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),". In contrast, Pulse gives no report for ",(0,l.kt)("inlineCode",{parentName:"p"},"printContact(Person p)"),", as we cannot be sure that ",(0,l.kt)("inlineCode",{parentName:"p"},"p.getEmergencyContact()")," will return ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),". Pulse then labels this error as latent and only reports if there is a call to ",(0,l.kt)("inlineCode",{parentName:"p"},"printContact(Person p)")," satisfying the condition for Null dereference."),(0,l.kt)("h3",{id:"pulse-x-nullsafe"},"Pulse x Nullsafe"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/checker-eradicate"},"Nullsafe")," is a type checker for ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullable")," annotations for Java. Classes following the Nullsafe discipline are annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullsafe"),"."),(0,l.kt)("p",null,"Consider the classes ",(0,l.kt)("inlineCode",{parentName:"p"},"Person")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Registry")," from the previous example. Assuming that class ",(0,l.kt)("inlineCode",{parentName:"p"},"Person")," is annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullsafe"),". In this case, we also annotate ",(0,l.kt)("inlineCode",{parentName:"p"},"getEmergencyContact()")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullable"),", to make explicit that this method can return the ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," value. There is still the risk that classes depending on ",(0,l.kt)("inlineCode",{parentName:"p"},"Person")," have Null dereferences. In this case, Pulse would report a Null dereference on ",(0,l.kt)("inlineCode",{parentName:"p"},"Registry"),". It could also be the case that class ",(0,l.kt)("inlineCode",{parentName:"p"},"Registry")," is annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullsafe"),". By default Pulse reports on ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullsafe")," files too, see the ",(0,l.kt)("inlineCode",{parentName:"p"},"--pulse-nullsafe-report-npe")," option (Facebook-specific: Pulse does not report on ",(0,l.kt)("inlineCode",{parentName:"p"},"@Nullsafe")," files)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Nullsafe(Nullsafe.Mode.LOCAL)\nclass Person {\n    Person emergencyContact;\n    String address;\n\n    @Nullable Person getEmergencyContact() {\n        return this.emergencyContact;\n    }\n}\n\nclass Registry {\n    ... // Pulse reports here\n}\n")),(0,l.kt)("h2",{id:"list-of-issue-types"},"List of Issue Types"),(0,l.kt)("p",null,"The following issue types are reported by this checker:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#constant_address_dereference"},"CONSTANT_ADDRESS_DEREFERENCE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#memory_leak"},"MEMORY_LEAK")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#nil_messaging_to_non_pod"},"NIL_MESSAGING_TO_NON_POD")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#nullptr_dereference"},"NULLPTR_DEREFERENCE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#optional_empty_access"},"OPTIONAL_EMPTY_ACCESS")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#pulse_uninitialized_value"},"PULSE_UNINITIALIZED_VALUE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#stack_variable_address_escape"},"STACK_VARIABLE_ADDRESS_ESCAPE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#use_after_delete"},"USE_AFTER_DELETE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#use_after_free"},"USE_AFTER_FREE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#use_after_lifetime"},"USE_AFTER_LIFETIME")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/all-issue-types#vector_invalidation"},"VECTOR_INVALIDATION"))))}m.isMDXComponent=!0}}]);