"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5993],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),f=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=f(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=f(t),d=o,m=p["".concat(u,".").concat(d)]||p[d]||l[d]||a;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var f=2;f<a;f++)i[f]=t[f];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2010:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return c},metadata:function(){return f},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={id:"about-Infer",title:"About Infer"},u=void 0,f={unversionedId:"about-Infer",id:"about-Infer",title:"About Infer",description:"Infer is a static program analyzer for Java, C, C++, Objective-C, and",source:"@site/docs/02-about-infer.md",sourceDirName:".",slug:"/about-Infer",permalink:"/docs/next/about-Infer",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"about-Infer",title:"About Infer"},sidebar:"docs",previous:{title:"Uninitialized Value",permalink:"/docs/next/checker-uninit"},next:{title:"Separation logic and bi-abduction",permalink:"/docs/next/separation-logic-and-bi-abduction"}},s={},p=[],l={toc:p},d="wrapper";function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)(d,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Infer is a static program analyzer for Java, C, C++, Objective-C, and\nErlang, written in ",(0,a.kt)("a",{parentName:"p",href:"https://ocaml.org/"},"OCaml"),". Infer is deployed\nwithin Meta and it is running as part of its Continuous Integration\npipeline to verify select properties of every code modification for a\nlarge range of projects, including the main family of apps such as\nFacebook, Messenger, Instagram, and WhatsApp. Infer is used at a\nnumber of other companies too. Infer can detect deep issues such as\nnull pointer dereferences, data races, and many more, which can\ninvolve reasoning about multiple functions or methods in different\nfiles in the code."))}m.isMDXComponent=!0}}]);